var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = {exports: {}}).exports, mod), mod.exports;
};
var __reExport = (target, module, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module) => {
  return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
};

// ../../node_modules/github-slugger/node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS({
  "../../node_modules/github-slugger/node_modules/emoji-regex/index.js"(exports, module) {
    module.exports = function() {
      return /[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2694\u2696\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD79\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED0\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3]|\uD83E[\uDD10-\uDD18\uDD80-\uDD84\uDDC0]|\uD83C\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uD83C\uDDFE\uD83C[\uDDEA\uDDF9]|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDFC\uD83C[\uDDEB\uDDF8]|\uD83C\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uD83C\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF8\uDDFE\uDDFF]|\uD83C\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uD83C\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uD83C\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uD83C\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uD83C\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uD83C\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uD83C\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uD83C\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uD83C\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uD83C\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uD83C\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uD83C\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uD83C\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uD83C\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uD83C\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uD83C\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|[#\*0-9]\u20E3/g;
    };
  }
});

// ../../node_modules/github-slugger/index.js
var require_github_slugger = __commonJS({
  "../../node_modules/github-slugger/index.js"(exports, module) {
    var emoji = require_emoji_regex();
    module.exports = BananaSlug;
    var own = Object.hasOwnProperty;
    var whitespace = /\s/g;
    var specials = /[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~â€™]/g;
    function BananaSlug() {
      var self = this;
      if (!(self instanceof BananaSlug))
        return new BananaSlug();
      self.reset();
    }
    BananaSlug.prototype.slug = function(value, maintainCase) {
      var self = this;
      var slug = slugger2(value, maintainCase === true);
      var originalSlug = slug;
      while (own.call(self.occurrences, slug)) {
        self.occurrences[originalSlug]++;
        slug = originalSlug + "-" + self.occurrences[originalSlug];
      }
      self.occurrences[slug] = 0;
      return slug;
    };
    BananaSlug.prototype.reset = function() {
      this.occurrences = Object.create(null);
    };
    function slugger2(string, maintainCase) {
      if (typeof string !== "string")
        return "";
      if (!maintainCase)
        string = string.toLowerCase();
      return string.trim().replace(specials, "").replace(emoji(), "").replace(whitespace, "-");
    }
    BananaSlug.slug = slugger2;
  }
});

// node_modules/unist-util-is/index.js
var convert = function(test) {
  if (test === void 0 || test === null) {
    return ok;
  }
  if (typeof test === "string") {
    return typeFactory(test);
  }
  if (typeof test === "object") {
    return "length" in test ? anyFactory(test) : propsFactory(test);
  }
  if (typeof test === "function") {
    return castFactory(test);
  }
  throw new Error("Expected function, string, or object as test");
};
function anyFactory(tests) {
  var checks = [];
  var index = -1;
  while (++index < tests.length) {
    checks[index] = convert(tests[index]);
  }
  return castFactory(any);
  function any(...parameters) {
    var index2 = -1;
    while (++index2 < checks.length) {
      if (checks[index2].call(this, ...parameters))
        return true;
    }
  }
}
function propsFactory(check) {
  return castFactory(all);
  function all(node) {
    var key;
    for (key in check) {
      if (node[key] !== check[key])
        return;
    }
    return true;
  }
}
function typeFactory(check) {
  return castFactory(type);
  function type(node) {
    return node && node.type === check;
  }
}
function castFactory(check) {
  return assertion;
  function assertion(...parameters) {
    return Boolean(check.call(this, ...parameters));
  }
}
function ok() {
  return true;
}

// node_modules/unist-util-visit-parents/color.js
function color(d) {
  return "[33m" + d + "[39m";
}

// node_modules/unist-util-visit-parents/index.js
var CONTINUE = true;
var SKIP = "skip";
var EXIT = false;
var visitParents = function(tree, test, visitor, reverse) {
  if (typeof test === "function" && typeof visitor !== "function") {
    reverse = visitor;
    visitor = test;
    test = null;
  }
  var is = convert(test);
  var step = reverse ? -1 : 1;
  factory(tree, null, [])();
  function factory(node, index, parents) {
    var value = typeof node === "object" && node !== null ? node : {};
    var name;
    if (typeof value.type === "string") {
      name = typeof value.tagName === "string" ? value.tagName : typeof value.name === "string" ? value.name : void 0;
      Object.defineProperty(visit2, "name", {
        value: "node (" + color(value.type + (name ? "<" + name + ">" : "")) + ")"
      });
    }
    return visit2;
    function visit2() {
      var result = [];
      var subresult;
      var offset;
      var grandparents;
      if (!test || is(node, index, parents[parents.length - 1] || null)) {
        result = toResult(visitor(node, parents));
        if (result[0] === EXIT) {
          return result;
        }
      }
      if (node.children && result[0] !== SKIP) {
        offset = (reverse ? node.children.length : -1) + step;
        grandparents = parents.concat(node);
        while (offset > -1 && offset < node.children.length) {
          subresult = factory(node.children[offset], offset, grandparents)();
          if (subresult[0] === EXIT) {
            return subresult;
          }
          offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
        }
      }
      return result;
    }
  }
};
function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE, value];
  }
  return [value];
}

// node_modules/unist-util-visit/index.js
var visit = function(tree, test, visitor, reverse) {
  if (typeof test === "function" && typeof visitor !== "function") {
    reverse = visitor;
    visitor = test;
    test = null;
  }
  visitParents(tree, test, overload, reverse);
  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};

// src/rehype-collect-headers.ts
var import_github_slugger = __toModule(require_github_slugger());
function createCollectHeaders() {
  const headers = [];
  const visitor = (node) => {
    var _a;
    if (node.type !== "element")
      return;
    const {tagName, children} = node;
    if (tagName[0] !== "h")
      return;
    let [_, depth] = (_a = tagName.match(/h([0-6])/)) != null ? _a : [];
    if (!depth)
      return;
    depth = Number.parseInt(depth);
    let text = "";
    visit(node, "text", (child) => {
      text += child.value;
    });
    let slug = node.properties.id || import_github_slugger.default.slug(text);
    node.properties = node.properties || {};
    node.properties.id = slug;
    headers.push({depth, slug, text});
    return node;
  };
  return {headers, rehypeCollectHeaders: () => (tree) => visit(tree, visitor)};
}
export {
  createCollectHeaders as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dpdGh1Yi1zbHVnZ2VyL25vZGVfbW9kdWxlcy9lbW9qaS1yZWdleC9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2l0aHViLXNsdWdnZXIvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtaXMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cy9jb2xvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0L2luZGV4LmpzIiwgIi4uL3NyYy9yZWh5cGUtY29sbGVjdC1oZWFkZXJzLnRzIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUEsV0FBTyxVQUFVLFdBQVc7QUFDM0IsYUFBTztBQUFBO0FBQUE7QUFBQTs7O0FDRFI7QUFBQTtBQUFBLFFBQUksUUFBUTtBQUVaLFdBQU8sVUFBVTtBQUVqQixRQUFJLE1BQU0sT0FBTztBQUNqQixRQUFJLGFBQWE7QUFDakIsUUFBSSxXQUFXO0FBRWYsMEJBQXVCO0FBQ3JCLFVBQUksT0FBTztBQUVYLFVBQUksQ0FBRSxpQkFBZ0I7QUFBYSxlQUFPLElBQUk7QUFFOUMsV0FBSztBQUFBO0FBU1AsZUFBVyxVQUFVLE9BQU8sU0FBVSxPQUFPLGNBQWM7QUFDekQsVUFBSSxPQUFPO0FBQ1gsVUFBSSxPQUFPLFNBQVEsT0FBTyxpQkFBaUI7QUFDM0MsVUFBSSxlQUFlO0FBRW5CLGFBQU8sSUFBSSxLQUFLLEtBQUssYUFBYSxPQUFPO0FBQ3ZDLGFBQUssWUFBWTtBQUNqQixlQUFPLGVBQWUsTUFBTSxLQUFLLFlBQVk7QUFBQTtBQUcvQyxXQUFLLFlBQVksUUFBUTtBQUV6QixhQUFPO0FBQUE7QUFPVCxlQUFXLFVBQVUsUUFBUSxX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
