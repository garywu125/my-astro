// node_modules/unist-util-is/index.js
var convert = function(test) {
  if (test === void 0 || test === null) {
    return ok;
  }
  if (typeof test === "string") {
    return typeFactory(test);
  }
  if (typeof test === "object") {
    return "length" in test ? anyFactory(test) : propsFactory(test);
  }
  if (typeof test === "function") {
    return castFactory(test);
  }
  throw new Error("Expected function, string, or object as test");
};
function anyFactory(tests) {
  var checks = [];
  var index = -1;
  while (++index < tests.length) {
    checks[index] = convert(tests[index]);
  }
  return castFactory(any);
  function any(...parameters) {
    var index2 = -1;
    while (++index2 < checks.length) {
      if (checks[index2].call(this, ...parameters))
        return true;
    }
  }
}
function propsFactory(check) {
  return castFactory(all);
  function all(node) {
    var key;
    for (key in check) {
      if (node[key] !== check[key])
        return;
    }
    return true;
  }
}
function typeFactory(check) {
  return castFactory(type);
  function type(node) {
    return node && node.type === check;
  }
}
function castFactory(check) {
  return assertion;
  function assertion(...parameters) {
    return Boolean(check.call(this, ...parameters));
  }
}
function ok() {
  return true;
}

// node_modules/unist-util-visit-parents/color.js
function color(d) {
  return "[33m" + d + "[39m";
}

// node_modules/unist-util-visit-parents/index.js
var CONTINUE = true;
var SKIP = "skip";
var EXIT = false;
var visitParents = function(tree, test, visitor, reverse) {
  if (typeof test === "function" && typeof visitor !== "function") {
    reverse = visitor;
    visitor = test;
    test = null;
  }
  var is = convert(test);
  var step = reverse ? -1 : 1;
  factory(tree, null, [])();
  function factory(node, index, parents) {
    var value = typeof node === "object" && node !== null ? node : {};
    var name;
    if (typeof value.type === "string") {
      name = typeof value.tagName === "string" ? value.tagName : typeof value.name === "string" ? value.name : void 0;
      Object.defineProperty(visit2, "name", {
        value: "node (" + color(value.type + (name ? "<" + name + ">" : "")) + ")"
      });
    }
    return visit2;
    function visit2() {
      var result = [];
      var subresult;
      var offset;
      var grandparents;
      if (!test || is(node, index, parents[parents.length - 1] || null)) {
        result = toResult(visitor(node, parents));
        if (result[0] === EXIT) {
          return result;
        }
      }
      if (node.children && result[0] !== SKIP) {
        offset = (reverse ? node.children.length : -1) + step;
        grandparents = parents.concat(node);
        while (offset > -1 && offset < node.children.length) {
          subresult = factory(node.children[offset], offset, grandparents)();
          if (subresult[0] === EXIT) {
            return subresult;
          }
          offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
        }
      }
      return result;
    }
  }
};
function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE, value];
  }
  return [value];
}

// node_modules/unist-util-visit/index.js
var visit = function(tree, test, visitor, reverse) {
  if (typeof test === "function" && typeof visitor !== "function") {
    reverse = visitor;
    visitor = test;
    test = null;
  }
  visitParents(tree, test, overload, reverse);
  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};

// src/remark-scoped-styles.ts
var noVisit = new Set(["root", "html", "text"]);
function scopedStyles(className) {
  const visitor = (node) => {
    var _a, _b;
    if (noVisit.has(node.type))
      return;
    const {data} = node;
    let currentClassName = (_b = (_a = data == null ? void 0 : data.hProperties) == null ? void 0 : _a.class) != null ? _b : "";
    node.data = node.data || {};
    node.data.hProperties = node.data.hProperties || {};
    node.data.hProperties.class = `${className} ${currentClassName}`.trim();
    return node;
  };
  return () => (tree) => visit(tree, visitor);
}
export {
  scopedStyles as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtaXMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cy9jb2xvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0L2luZGV4LmpzIiwgIi4uL3NyYy9yZW1hcmstc2NvcGVkLXN0eWxlcy50cyJdLAogICJtYXBwaW5ncyI6ICI7QUFpSE8sSUFBSSxVQWtCUCxTQUFVLE1BQU07QUFDZCxNQUFJLFNBQVMsVUFBYSxTQUFTLE1BQU07QUFDdkMsV0FBTztBQUFBO0FBR1QsTUFBSSxPQUFPLFNBQVMsVUFBVTtBQUM1QixXQUFPLFlBQVk7QUFBQTtBQUdyQixNQUFJLE9BQU8sU0FBUyxVQUFVO0FBRTVCLFdBQU8sWUFBWSxPQUFPLFdBQVcsUUFBUSxhQUFhO0FBQUE7QUFHNUQsTUFBSSxPQUFPLFNBQVMsWUFBWTtBQUM5QixXQUFPLFlBQVk7QUFBQTtBQUdyQixRQUFNLElBQUksTUFBTTtBQUFBO0FBT3RCLG9CQUFvQixPQUFPO0FBRXpCLE1BQUksU0FBUztBQUNiLE1BQUksUUFBUTtBQUVaLFNBQU8sRUFBRSxRQUFRLE1BQU0sUUFBUTtBQUM3QixXQUFPLFNBQVMsUUFBUSxNQUFNO0FBQUE7QUFHaEMsU0FBTyxZQUFZO0FBT25CLGtCQUFnQixZQUFZO0FBQzFCLFFBQUksU0FBUTtBQUVaLFdBQU8sRUFBRSxTQUFRLE9BQU8sUUFBUTtBQUM5QixVQUFJLE9BQU8sUUFBTyxLQUFLLE1BQU0sR0FBRztBQUFhLGVBQU87QUFBQTtBQUFBO0FBQUE7QUFZMUQsc0JBQXNCLE9BQU87QUFDM0IsU0FBTyxZQUFZO0FBTW5CLGVBQWEsTUFBTTtBQUVqQixRQUFJO0FBRUosU0FBSyxPQUFPLE9BQU87QUFDakIsVUFBSSxLQUFLLFNBQVMsTUFBTTtBQUFNO0FB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
