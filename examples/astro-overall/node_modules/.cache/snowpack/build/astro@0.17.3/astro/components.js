import 'node-fetch';
import { renderMarkdown } from '@astrojs/markdown-support';
import { h, Fragment } from './dist/internal/h.js';
export { default as Prism } from './components/Prism.astro.js';
import 'prismjs/components/index.js';
import '@astrojs/prism';
import 'prismjs';

const __astroInternal = Symbol('astro.internal');
async function __render(props, ...children) {
  const Astro = {
    props,
    site: new URL('/', "http://localhost:3000"),
    css: (props[__astroInternal] && props[__astroInternal].css) || [],
    request: (props[__astroInternal] && props[__astroInternal].request) || {},
    isPage: (props[__astroInternal] && props[__astroInternal].isPage) || false,
  };

  const {
  content,
  $scope
} = Astro.props;
let html = null;
if (content) {
  const {
    content: htmlContent
  } = await renderMarkdown(content, {
    mode: "md",
    $: {
      scopedClassName: $scope
    }
  });
  html = htmlContent;
}

  return h(Fragment, null, h(Fragment, null,(html ? html : h(Fragment, null, children))));
}
var Markdown = { isAstroComponent: true, __render };

export { Markdown };
