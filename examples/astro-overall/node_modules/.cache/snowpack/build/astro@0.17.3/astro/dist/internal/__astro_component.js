import hash from 'shorthash';
import { valueToEstree } from 'estree-util-value-to-estree';
import { generate } from 'astring';

var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// src/internal/renderer-astro.ts
var renderer_astro_exports = {};
__export(renderer_astro_exports, {
  check: () => check,
  renderToStaticMarkup: () => renderToStaticMarkup
});
function check(Component) {
  return Component.isAstroComponent;
}
async function renderToStaticMarkup(Component, props, children) {
  const html = await Component.__render(props, children);
  return {html};
}

// src/internal/renderer-html.ts
var renderer_html_exports = {};
__export(renderer_html_exports, {
  renderToStaticMarkup: () => renderToStaticMarkup2
});

// src/internal/h.ts
var voidTags = new Set(["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
function* _h(tag, attrs, children) {
  if (tag.toLowerCase() === "!doctype") {
    yield `<${tag} `;
    if (attrs) {
      yield Object.keys(attrs).join(" ");
    }
    yield ">";
    return;
  }
  yield `<${tag}`;
  if (attrs) {
    for (let [key, value] of Object.entries(attrs)) {
      if (value === "")
        yield ` ${key}=""`;
      else if (value == null || value === false)
        yield "";
      else if (value === true)
        yield ` ${key}`;
      else
        yield ` ${key}="${value}"`;
    }
  }
  yield ">";
  if (voidTags.has(tag)) {
    return;
  }
  for (let child of children) {
    if (typeof child === "function") {
      yield child();
    } else if (typeof child === "string") {
      yield child;
    } else if (!child && child !== 0) ; else {
      yield child;
    }
  }
  yield `</${tag}>`;
}
async function h(tag, attrs, ...pChildren) {
  const children = await Promise.all(pChildren.flat(Infinity));
  if (typeof tag === "function") {
    return tag(attrs, ...children);
  }
  return Array.from(_h(tag, attrs, children)).join("");
}

// src/internal/renderer-html.ts
async function renderToStaticMarkup2(tag, props, children) {
  const html = await h(tag, props, Promise.resolve(children));
  return {
    html
  };
}

// src/internal/__astro_component.ts
var serialize = (value) => generate(valueToEstree(value));
var astroRendererInstance = {
  source: "",
  renderer: renderer_astro_exports,
  polyfills: [],
  hydrationPolyfills: []
};
var astroHtmlRendererInstance = {
  source: "",
  renderer: renderer_html_exports,
  polyfills: [],
  hydrationPolyfills: []
};
var rendererInstances = [];
function setRenderers(_rendererInstances) {
  rendererInstances = [astroRendererInstance].concat(_rendererInstances);
}
function isCustomElementTag(name) {
  return typeof name === "string" && /-/.test(name);
}
var rendererCache = new Map();
async function resolveRenderer(Component, props = {}, children) {
  if (rendererCache.has(Component)) {
    return rendererCache.get(Component);
  }
  const errors = [];
  for (const instance of rendererInstances) {
    const {renderer} = instance;
    try {
      const shouldUse = await renderer.check(Component, props, children);
      if (shouldUse) {
        rendererCache.set(Component, instance);
        return instance;
      }
    } catch (err) {
      errors.push(err);
    }
  }
  if (errors.length) {
    throw errors[0];
  }
}
async function generateHydrateScript({instance, astroId, props}, {hydrate, componentUrl, componentExport}) {
  const {source} = instance;
  let hydrationSource = "";
  if (instance.hydrationPolyfills.length) {
    hydrationSource += `await Promise.all([${instance.hydrationPolyfills.map((src) => `import("${src}")`).join(", ")}]);
`;
  }
  hydrationSource += source ? `
  const [{ ${componentExport.value}: Component }, { default: hydrate }] = await Promise.all([import("${componentUrl}"), import("${source}")]);
  return (el, children) => hydrate(el)(Component, ${serialize(props)}, children);
` : `
  await import("${componentUrl}");
  return () => {};
`;
  const hydrationScript = `<script type="module">
import setup from '/_astro_frontend/hydrate/${hydrate}.js';
setup("${astroId}", async () => {
  ${hydrationSource}
});
</script>`;
  return hydrationScript;
}
var getComponentName = (Component, componentProps) => {
  var _a;
  if (componentProps.displayName)
    return componentProps.displayName;
  switch (typeof Component) {
    case "function":
      return (_a = Component.displayName) != null ? _a : Component.name;
    case "string":
      return Component;
    default: {
      return Component;
    }
  }
};
var __astro_component = (Component, metadata = {}) => {
  if (Component == null) {
    throw new Error(`Unable to render ${metadata.displayName} because it is ${Component}!
Did you forget to import the component or is it possible there is a typo?`);
  } else if (typeof Component === "string" && !isCustomElementTag(Component)) {
    throw new Error(`Astro is unable to render ${metadata.displayName}!
Is there a renderer to handle this type of component defined in your Astro config?`);
  }
  return async (props, ..._children) => {
    const children = _children.join("\n");
    let instance = await resolveRenderer(Component, props, children);
    if (!instance) {
      if (isCustomElementTag(Component)) {
        instance = astroHtmlRendererInstance;
      } else {
        instance = rendererInstances.length === 2 ? rendererInstances[1] : void 0;
      }
      if (!instance) {
        const name = getComponentName(Component, metadata);
        throw new Error(`No renderer found for ${name}! Did you forget to add a renderer to your Astro config?`);
      }
    }
    let {html} = await instance.renderer.renderToStaticMarkup(Component, props, children, metadata);
    if (instance.polyfills.length) {
      let polyfillScripts = instance.polyfills.map((src) => `<script type="module" src="${src}"></script>`).join("");
      html = html + polyfillScripts;
    }
    if (!metadata.hydrate) {
      return html.replace(/\<\/?astro-fragment\>/g, "");
    }
    const astroId = hash.unique(html);
    const script = await generateHydrateScript({instance, astroId, props}, metadata);
    const astroRoot = `<astro-root uid="${astroId}">${html}</astro-root>`;
    return [astroRoot, script].join("\n");
  };
};

export { __astro_component, setRenderers };
