// src/search.ts
import "source-map-support/register.js";
import {existsSync} from "fs";
import path from "path";
import {fileURLToPath} from "url";
import glob from "tiny-glob/sync.js";
function findAnyPage(candidates, astroConfig) {
  for (let candidate of candidates) {
    const url = new URL(`./${candidate}`, astroConfig.pages);
    if (existsSync(url)) {
      const pagesPath = astroConfig.pages.pathname.replace(astroConfig.projectRoot.pathname, "");
      return {
        fileURL: url,
        snowpackURL: `/_astro/${pagesPath}${candidate}.js`
      };
    }
  }
  return false;
}
function searchForPage(url, astroConfig) {
  const reqPath = decodeURI(url.pathname);
  const base = reqPath.substr(1);
  if (reqPath.endsWith("/")) {
    const candidates2 = [`${base}index.astro`, `${base}index.md`];
    const location2 = findAnyPage(candidates2, astroConfig);
    if (location2) {
      return {
        statusCode: 200,
        location: location2,
        pathname: reqPath
      };
    }
  } else {
    const candidates2 = [`${base}.astro`, `${base}.md`];
    let location2 = findAnyPage(candidates2, astroConfig);
    if (location2) {
      return {
        statusCode: 200,
        location: location2,
        pathname: reqPath
      };
    }
  }
  const candidates = [`${base}/index.astro`, `${base}/index.md`];
  const location = findAnyPage(candidates, astroConfig);
  if (location) {
    return {
      statusCode: 301,
      location: null,
      pathname: reqPath + "/"
    };
  }
  const hasExt = !!path.extname(reqPath);
  if (!location && !hasExt) {
    const collection = loadCollection(reqPath, astroConfig);
    if (collection) {
      return {
        statusCode: 200,
        location: collection.location,
        pathname: reqPath,
        currentPage: collection.currentPage || 1
      };
    }
  }
  if (reqPath === "/500") {
    return {
      statusCode: 200,
      location: {
        fileURL: new URL("./frontend/500.astro", import.meta.url),
        snowpackURL: `/_astro_frontend/500.astro.js`
      },
      pathname: reqPath
    };
  }
  return {
    statusCode: 404
  };
}
function loadCollection(url, astroConfig) {
  const pages = glob("**/$*.astro", {cwd: fileURLToPath(astroConfig.pages), filesOnly: true});
  for (const pageURL of pages) {
    const reqURL = new RegExp("^/" + pageURL.replace(/\$([^/]+)\.astro/, "$1") + "(?:/(.*)|/?$)");
    const match = url.match(reqURL);
    if (match) {
      let currentPage;
      if (match[1]) {
        const segments = match[1].split("/").filter((s) => !!s);
        if (segments.length) {
          const last = segments.pop();
          if (parseInt(last, 10)) {
            currentPage = parseInt(last, 10);
          }
        }
      }
      const pagesPath = astroConfig.pages.pathname.replace(astroConfig.projectRoot.pathname, "");
      return {
        location: {
          fileURL: new URL(`./${pageURL}`, astroConfig.pages),
          snowpackURL: `/_astro/${pagesPath}${pageURL}.js`
        },
        currentPage
      };
    }
  }
}
export {
  searchForPage
};
//# sourceMappingURL=data:application/json;base64,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
