var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/cli.ts
import "source-map-support/register.js";
import {
  bold as bold4,
  red as red3
} from "kleur/colors";
import {promises as fsPromises} from "fs";
import yargs from "yargs-parser";

// src/config.ts
import "source-map-support/register.js";
import path from "path";
import {existsSync} from "fs";
var type = (thing) => Array.isArray(thing) ? "Array" : typeof thing;
function validateConfig(config) {
  var _a, _b, _c, _d, _e;
  if (config === void 0 || config === null)
    throw new Error(`[config] Config empty!`);
  if (typeof config !== "object")
    throw new Error(`[config] Expected object, received ${typeof config}`);
  for (const key of ["projectRoot", "pages", "dist", "public"]) {
    if (config[key] !== void 0 && config[key] !== null && typeof config[key] !== "string") {
      throw new Error(`[config] ${key}: ${JSON.stringify(config[key])}
  Expected string, received ${type(config[key])}.`);
    }
  }
  for (const key of ["sitemap"]) {
    if (config[key] !== void 0 && config[key] !== null && typeof config[key] !== "boolean") {
      throw new Error(`[config] ${key}: ${JSON.stringify(config[key])}
  Expected boolean, received ${type(config[key])}.`);
    }
  }
  if (config.buildOptions) {
    if (config.buildOptions.site !== void 0) {
      if (typeof config.buildOptions.site !== "string")
        throw new Error(`[config] buildOptions.site is not a string`);
      try {
        new URL(config.buildOptions.site);
      } catch (err) {
        throw new Error("[config] buildOptions.site must be a valid URL");
      }
    }
  }
  if (typeof ((_a = config.devOptions) == null ? void 0 : _a.port) !== "number") {
    throw new Error(`[config] devOptions.port: Expected number, received ${type((_b = config.devOptions) == null ? void 0 : _b.port)}`);
  }
  if (((_c = config.devOptions) == null ? void 0 : _c.tailwindConfig) !== void 0 && typeof ((_d = config.devOptions) == null ? void 0 : _d.tailwindConfig) !== "string") {
    throw new Error(`[config] devOptions.tailwindConfig: Expected string, received ${type((_e = config.devOptions) == null ? void 0 : _e.tailwindConfig)}`);
  }
}
function configDefaults(userConfig) {
  const config = __spreadValues({}, userConfig || {});
  if (!config.projectRoot)
    config.projectRoot = ".";
  if (!config.src)
    config.src = "./src";
  if (!config.pages)
    config.pages = "./src/pages";
  if (!config.dist)
    config.dist = "./dist";
  if (!config.public)
    config.public = "./public";
  if (!config.devOptions)
    config.devOptions = {};
  if (!config.devOptions.port)
    config.devOptions.port = 3e3;
  if (!config.buildOptions)
    config.buildOptions = {};
  if (!config.markdownOptions)
    config.markdownOptions = {};
  if (typeof config.buildOptions.sitemap === "undefined")
    config.buildOptions.sitemap = true;
  return config;
}
function normalizeConfig(userConfig, root) {
  const config = __spreadValues({}, userConfig || {});
  const fileProtocolRoot = `file://${root}/`;
  config.projectRoot = new URL(config.projectRoot + "/", fileProtocolRoot);
  config.src = new URL(config.src + "/", fileProtocolRoot);
  config.pages = new URL(config.pages + "/", fileProtocolRoot);
  config.public = new URL(config.public + "/", fileProtocolRoot);
  return config;
}
async function loadConfig(rawRoot, configFileName = "astro.config.mjs") {
  const root = rawRoot ? path.resolve(rawRoot) : process.cwd();
  const astroConfigPath = new URL(`./${configFileName}`, `file://${root}/`);
  let config;
  if (existsSync(astroConfigPath)) {
    config = configDefaults((await import(astroConfigPath.href)).default);
  } else {
    config = configDefaults();
  }
  validateConfig(config);
  config = normalizeConfig(config, root);
  return config;
}

// src/build.ts
import "source-map-support/register.js";
import fs3 from "fs";
import path7 from "path";
import {fileURLToPath as fileURLToPath6} from "url";
import {performance as performance4} from "perf_hooks";
import eslexer from "es-module-lexer";
import cheerio2 from "cheerio";
import del from "del";
import {bold as bold3, green, yellow as yellow2, red as red2, underline as underline3} from "kleur/colors";
import mime from "mime";
import glob2 from "tiny-glob";

// src/build/bundle/css.ts
import {performance as performance2} from "perf_hooks";
import shorthash from "shorthash";
import cheerio from "cheerio";
import esbuild from "esbuild";

// src/build/util.ts
import {performance} from "perf_hooks";
import fs from "fs";
import path2 from "path";
import {URL as URL2} from "url";
function canonicalURL(url, base) {
  let pathname = url.replace(/\/index.html$/, "");
  pathname = pathname.replace(/\/1\/?$/, "");
  if (!path2.extname(pathname))
    pathname = pathname.replace(/(\/+)?$/, "/");
  pathname = pathname.replace(/\/+/g, "/");
  return new URL2(pathname, base);
}
function getDistPath(specifier, {astroConfig, srcPath}) {
  if (specifier[0] === "/")
    return specifier;
  const {pages: pagesRoot, projectRoot} = astroConfig;
  const fileLoc = new URL2(specifier, srcPath);
  const projectLoc = fileLoc.pathname.replace(projectRoot.pathname, "");
  const ext = path2.extname(fileLoc.pathname);
  const isPage = fileLoc.pathname.includes(pagesRoot.pathname) && (ext === ".astro" || ext === ".md");
  if (isPage) {
    const [, publicURL] = projectLoc.split(pagesRoot.pathname);
    return publicURL || "/index.html";
  }
  const isPublicAsset = fileLoc.pathname.includes(astroConfig.public.pathname);
  if (isPublicAsset) {
    return fileLoc.pathname.replace(astroConfig.public.pathname, "/");
  }
  return "/_astro/" + projectLoc;
}
function getSrcPath(distURL, {astroConfig}) {
  if (distURL.startsWith("/_astro/")) {
    return new URL2("." + distURL.replace(/^\/_astro\//, ""), astroConfig.projectRoot);
  } else if (distURL === "/index.html") {
    return new URL2("./index.astro", astroConfig.pages);
  }
  const possibleURLs = [
    new URL2("." + distURL, astroConfig.public),
    new URL2("." + distURL.replace(/([^\/])+\/d+\/index.html/, "$$1.astro"), astroConfig.pages),
    new URL2("." + distURL.replace(/\/index\.html$/, ".astro"), astroConfig.pages)
  ];
  for (const possibleURL of possibleURLs) {
    if (fs.existsSync(possibleURL))
      return possibleURL;
  }
  return new URL2("." + distURL, astroConfig.projectRoot);
}
function stopTimer(start) {
  const diff = performance.now() - start;
  return diff < 750 ? `${Math.round(diff)}ms` : `${(diff / 1e3).toFixed(1)}s`;
}

// src/logger.ts
import "source-map-support/register.js";
import {bold, blue, red, grey, underline, yellow} from "kleur/colors";
import {Writable} from "stream";
import {format as utilFormat} from "util";
import stringWidth from "string-width";
var defaultLogDestination = new Writable({
  objectMode: true,
  write(event, _, callback) {
    let dest = process.stderr;
    if (levels[event.level] < levels["error"]) {
      dest = process.stdout;
    }
    let type2 = event.type;
    if (type2 !== null) {
      if (event.level === "info") {
        type2 = bold(blue(type2));
      } else if (event.level === "warn") {
        type2 = bold(yellow(type2));
      } else if (event.level === "error") {
        type2 = bold(red(type2));
      }
      dest.write(`[${type2}] `);
    }
    dest.write(utilFormat(...event.args));
    dest.write("\n");
    callback();
  }
});
var defaultLogOptions = {
  dest: defaultLogDestination,
  level: "info"
};
var levels = {
  debug: 20,
  info: 30,
  warn: 40,
  error: 50,
  silent: 90
};
function log(opts = defaultLogOptions, level, type2, ...args) {
  const event = {
    type: type2,
    level,
    args,
    message: ""
  };
  if (levels[opts.level] > levels[level]) {
    return;
  }
  opts.dest.write(event);
}
function debug(opts, type2, ...messages) {
  return log(opts, "debug", type2, ...messages);
}
function info(opts, type2, ...messages) {
  return log(opts, "info", type2, ...messages);
}
function warn(opts, type2, ...messages) {
  return log(opts, "warn", type2, ...messages);
}
function error(opts, type2, ...messages) {
  return log(opts, "error", type2, ...messages);
}
function table(opts, columns) {
  return function logTable(logFn, ...input) {
    const messages = columns.map((len, i) => padStr(input[i].toString(), len));
    logFn(opts, null, ...messages);
  };
}
function parseError(opts, err) {
  if (!err.frame) {
    return error(opts, "parse-error", err.message || err);
  }
  let frame = err.frame.replace(/^([0-9]+)(:)/gm, `${bold("$1")} \u2502`).replace(/(?<=^\s+)(\^)/gm, bold(red(" ^"))).replace(/^/gm, "   ");
  error(opts, "parse-error", `

 ${underline(bold(grey(`${err.filename || ""}:${err.start.line}:${err.start.column}`)))}

 ${bold(red(`\u{1D605} ${err.message}`))}

${frame}
`);
}
var logger = {
  debug: debug.bind(null, defaultLogOptions),
  info: info.bind(null, defaultLogOptions),
  warn: warn.bind(null, defaultLogOptions),
  error: error.bind(null, defaultLogOptions)
};
function padStr(str, len) {
  const strLen = stringWidth(str);
  if (strLen > len) {
    return str.substring(0, len - 3) + "...";
  }
  const spaces = Array.from({length: len - strLen}, () => " ").join("");
  return str + spaces;
}
var defaultLogLevel;
if (process.argv.includes("--verbose")) {
  defaultLogLevel = "debug";
} else if (process.argv.includes("--silent")) {
  defaultLogLevel = "silent";
} else {
  defaultLogLevel = "info";
}

// src/build/bundle/css.ts
var COMMON_URL = `/_astro/common-[HASH].css`;
async function bundleCSS({
  astroConfig,
  buildState,
  logging: logging3,
  depTree
}) {
  const timer = {};
  const cssMap = new Map();
  timer.bundle = performance2.now();
  const sortedPages = Object.keys(depTree);
  sortedPages.sort((a, b) => a.localeCompare(b, "en", {numeric: true}));
  for (const pageUrl of sortedPages) {
    const {css} = depTree[pageUrl];
    for (const cssUrl of css.keys()) {
      if (cssMap.has(cssUrl)) {
        cssMap.set(cssUrl, COMMON_URL);
      } else {
        cssMap.set(cssUrl, "/_astro" + pageUrl.replace(/.html$/, "").replace(/^\./, "") + "-[HASH].css");
      }
    }
  }
  timer.bundle = performance2.now();
  for (const id of cssMap.keys()) {
    const newUrl = cssMap.get(id);
    if (!buildState[newUrl]) {
      buildState[newUrl] = {
        srcPath: getSrcPath(id, {astroConfig}),
        contents: "",
        contentType: "text/css",
        encoding: "utf8"
      };
    }
    buildState[newUrl].contents += Buffer.isBuffer(buildState[id].contents) ? buildState[id].contents.toString("utf8") : buildState[id].contents;
    delete buildState[id];
  }
  debug(logging3, "css", `bundled [${stopTimer(timer.bundle)}]`);
  timer.minify = performance2.now();
  await Promise.all(Object.keys(buildState).map(async (id) => {
    if (buildState[id].contentType !== "text/css")
      return;
    const {code} = await esbuild.transform(buildState[id].contents, {
      loader: "css",
      minify: true
    });
    buildState[id].contents = code;
  }));
  debug(logging3, "css", `minified [${stopTimer(timer.minify)}]`);
  timer.hashes = performance2.now();
  const cssHashes = new Map();
  for (const id of Object.keys(buildState)) {
    if (!id.includes("[HASH].css"))
      continue;
    const hash = shorthash.unique(buildState[id].contents);
    const newID = id.replace(/\[HASH\]/, hash);
    cssHashes.set(id, newID);
    buildState[newID] = buildState[id];
    delete buildState[id];
  }
  debug(logging3, "css", `built hashes [${stopTimer(timer.hashes)}]`);
  timer.html = performance2.now();
  await Promise.all(Object.keys(buildState).map(async (id) => {
    if (buildState[id].contentType !== "text/html")
      return;
    const $ = cheerio.load(buildState[id].contents);
    const pageCSS = new Set();
    $("link[href]").each((i, el) => {
      const srcPath = getSrcPath(id, {astroConfig});
      const oldHref = getDistPath($(el).attr("href") || "", {astroConfig, srcPath});
      const newHref = cssMap.get(oldHref);
      if (newHref) {
        if (pageCSS.has(newHref)) {
          $(el).remove();
        } else {
          $(el).attr("href", cssHashes.get(newHref) || "");
          pageCSS.add(newHref);
        }
        $(el).attr("rel", "stylesheet");
        $(el).attr("type", "text/css");
      }
    });
    buildState[id].contents = $.html();
  }));
  debug(logging3, "css", `parsed html [${stopTimer(timer.html)}]`);
}

// src/build/bundle/js.ts
import {fileURLToPath} from "url";
import {rollup} from "rollup";
import {terser} from "rollup-plugin-terser";

// src/build/stats.ts
import {underline as underline2, bold as bold2} from "kleur/colors";
import gzipSize from "gzip-size";
function createURLStats() {
  return new Map();
}
function createBundleStats() {
  return new Map();
}
async function addBundleStats(bundleStatsMap, code, filename) {
  const gzsize = await gzipSize(code);
  bundleStatsMap.set(filename, {
    size: Buffer.byteLength(code),
    gzipSize: gzsize
  });
}
function mapBundleStatsToURLStats({urlStats, depTree, bundleStats}) {
  var _a;
  for (let [srcPath, stats] of bundleStats) {
    for (let url of urlStats.keys()) {
      if (depTree[url] && depTree[url].js.has("/" + srcPath)) {
        (_a = urlStats.get(url)) == null ? void 0 : _a.stats.push(stats);
      }
    }
  }
}
async function collectBundleStats(buildState, depTree) {
  const urlStats = createURLStats();
  await Promise.all(Object.keys(buildState).map(async (id) => {
    if (!depTree[id])
      return;
    const stats = await Promise.all([...depTree[id].js, ...depTree[id].css, ...depTree[id].images].map(async (url) => {
      if (!buildState[url])
        return void 0;
      const stat = {
        size: Buffer.byteLength(buildState[url].contents),
        gzipSize: await gzipSize(buildState[url].contents)
      };
      return stat;
    }));
    urlStats.set(id, {
      dynamicImports: new Set(),
      stats: stats.filter((s) => !!s)
    });
  }));
  return urlStats;
}
function logURLStats(logging3, urlStats) {
  const builtURLs = [...urlStats.keys()].map((url) => url.replace(/index\.html$/, ""));
  builtURLs.sort((a, b) => a.localeCompare(b, "en", {numeric: true}));
  info(logging3, null, "");
  const log2 = table(logging3, [60, 20]);
  log2(info, "   " + bold2(underline2("Pages")), bold2(underline2("Page Weight (GZip)")));
  const lastIndex = builtURLs.length - 1;
  builtURLs.forEach((url, index) => {
    var _a;
    const sep = index === 0 ? "\u250C" : index === lastIndex ? "\u2514" : "\u251C";
    const urlPart = " " + sep + " " + url;
    const bytes = ((_a = urlStats.get(url) || urlStats.get(url + "index.html")) == null ? void 0 : _a.stats.map((s) => s.gzipSize).reduce((a, b) => a + b, 0)) || 0;
    const kb = (bytes * 1e-3).toFixed(2);
    const sizePart = kb + " kB";
    log2(info, urlPart + "index.html", sizePart);
  });
}

// src/build/bundle/js.ts
function collectJSImports(buildState) {
  const imports = new Set();
  for (const id of Object.keys(buildState)) {
    if (buildState[id].contentType === "application/javascript")
      imports.add(id);
  }
  return imports;
}
async function bundleJS(imports, {runtime, dist}) {
  const ROOT = "astro:root";
  const root = `
  ${[...imports].map((url) => `import '${url}';`).join("\n")}
`;
  const inputOptions = {
    input: [...imports],
    plugins: [
      {
        name: "astro:build",
        resolveId(source, imported) {
          if (source === ROOT) {
            return source;
          }
          if (source.startsWith("/")) {
            return source;
          }
          if (imported) {
            const outUrl = new URL(source, "http://example.com" + imported);
            return outUrl.pathname;
          }
          return null;
        },
        async load(id) {
          if (id === ROOT) {
            return root;
          }
          const result = await runtime.load(id);
          if (result.statusCode !== 200) {
            return null;
          }
          return result.contents.toString("utf-8");
        }
      }
    ]
  };
  const build2 = await rollup(inputOptions);
  const outputOptions = {
    dir: fileURLToPath(dist),
    format: "esm",
    exports: "named",
    entryFileNames(chunk) {
      const {facadeModuleId} = chunk;
      if (!facadeModuleId)
        throw new Error(`facadeModuleId missing: ${chunk.name}`);
      return facadeModuleId.substr(1);
    },
    plugins: [
      terser()
    ]
  };
  const stats = createBundleStats();
  const {output} = await build2.write(outputOptions);
  await Promise.all(output.map(async (chunk) => {
    const code = chunk.code || "";
    await addBundleStats(stats, code, chunk.fileName);
  }));
  return stats;
}

// src/build/page.ts
import path3 from "path";

// src/build/rss.ts
import parser from "fast-xml-parser";
function validateRSS(rss, srcFile) {
  if (!rss.title)
    throw new Error(`[${srcFile}] rss.title required`);
  if (!rss.description)
    throw new Error(`[${srcFile}] rss.description required`);
  if (typeof rss.item !== "function")
    throw new Error(`[${srcFile}] rss.item() function required`);
}
function generateRSS(input, options) {
  const {srcFile, feedURL} = options;
  validateRSS(input, srcFile);
  let xml = `<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"`;
  if (input.xmlns) {
    for (const [k, v] of Object.entries(input.xmlns)) {
      xml += ` xmlns:${k}="${v}"`;
    }
  }
  xml += `>`;
  xml += `<channel>`;
  xml += `<title><![CDATA[${input.title}]]></title>`;
  xml += `<description><![CDATA[${input.description}]]></description>`;
  xml += `<link>${canonicalURL(feedURL, input.site).href}</link>`;
  if (typeof input.customData === "string")
    xml += input.customData;
  if (!Array.isArray(input.data) || !input.data.length)
    throw new Error(`[${srcFile}] data() returned no items. Can\u2019t generate RSS feed.`);
  for (const item of input.data) {
    xml += `<item>`;
    const result = input.item(item);
    if (typeof result !== "object")
      throw new Error(`[${srcFile}] rss.item() expected to return an object, returned ${typeof result}.`);
    if (!result.title)
      throw new Error(`[${srcFile}] rss.item() returned object but required "title" is missing.`);
    if (!result.link)
      throw new Error(`[${srcFile}] rss.item() returned object but required "link" is missing.`);
    xml += `<title><![CDATA[${result.title}]]></title>`;
    xml += `<link>${canonicalURL(result.link, input.site).href}</link>`;
    if (result.description)
      xml += `<description><![CDATA[${result.description}]]></description>`;
    if (result.pubDate) {
      if (typeof result.pubDate === "number" || typeof result.pubDate === "string") {
        result.pubDate = new Date(result.pubDate);
      } else if (result.pubDate instanceof Date === false) {
        throw new Error("[${filename}] rss.item().pubDate must be a Date");
      }
      xml += `<pubDate>${result.pubDate.toUTCString()}</pubDate>`;
    }
    if (typeof result.customData === "string")
      xml += result.customData;
    xml += `</item>`;
  }
  xml += `</channel></rss>`;
  const isValid = parser.validate(xml);
  if (isValid !== true) {
    throw new Error(isValid);
  }
  return xml;
}

// src/build/page.ts
import {fileURLToPath as fileURLToPath2} from "url";
function getPageType(filepath) {
  if (/\$[^.]+.astro$/.test(filepath.pathname))
    return "collection";
  return "static";
}
async function buildCollectionPage({astroConfig, filepath, runtime, site, buildState}) {
  const {pages: pagesRoot} = astroConfig;
  const srcURL = filepath.pathname.replace(pagesRoot.pathname, "/");
  const outURL = srcURL.replace(/\$([^.]+)\.astro$/, "$1");
  const builtURLs = new Set();
  async function loadCollection2(url) {
    if (builtURLs.has(url))
      return;
    const result2 = await runtime.load(url);
    builtURLs.add(url);
    if (result2.statusCode === 200) {
      const outPath = path3.posix.join(url, "/index.html");
      buildState[outPath] = {
        srcPath: filepath,
        contents: result2.contents,
        contentType: "text/html",
        encoding: "utf8"
      };
    }
    return result2;
  }
  const [result] = await Promise.all([
    loadCollection2(outURL)
  ]);
  if (result.statusCode >= 500) {
    throw new Error(result.error);
  }
  if (result.statusCode === 200 && !result.collectionInfo) {
    throw new Error(`[${srcURL}]: Collection page must export createCollection() function`);
  }
  if (result.collectionInfo) {
    await Promise.all([...result.collectionInfo.additionalURLs].map(async (url) => {
      const addlResult = await loadCollection2(url);
      builtURLs.add(url);
      if (addlResult && addlResult.collectionInfo) {
        await Promise.all([...addlResult.collectionInfo.additionalURLs].map(async (url2) => loadCollection2(url2)));
      }
    }));
    if (result.collectionInfo.rss) {
      if (!site)
        throw new Error(`[${srcURL}] createCollection() tried to generate RSS but "buildOptions.site" missing in astro.config.mjs`);
      let feedURL = outURL === "/" ? "/index" : outURL;
      feedURL = "/feed" + feedURL + ".xml";
      const rss = generateRSS(__spreadProps(__spreadValues({}, result.collectionInfo.rss), {site}), {srcFile: srcURL, feedURL});
      buildState[feedURL] = {
        srcPath: filepath,
        contents: rss,
        contentType: "application/rss+xml",
        encoding: "utf8"
      };
    }
  }
}
async function buildStaticPage({astroConfig, buildState, filepath, runtime}) {
  const {pages: pagesRoot} = astroConfig;
  const url = filepath.pathname.replace(pagesRoot.pathname, "/").replace(/(index)?\.(astro|md)$/, "");
  const result = await runtime.load(url);
  if (result.statusCode !== 200) {
    let err = result.error;
    if (!(err instanceof Error))
      err = new Error(err);
    err.filename = fileURLToPath2(filepath);
    throw err;
  }
  const outFile = path3.posix.join(url, "/index.html");
  buildState[outFile] = {
    srcPath: filepath,
    contents: result.contents,
    contentType: "text/html",
    encoding: "utf8"
  };
}

// src/build/sitemap.ts
function generateSitemap(buildState, site) {
  const uniqueURLs = new Set();
  for (const id of Object.keys(buildState)) {
    if (buildState[id].contentType !== "text/html")
      continue;
    uniqueURLs.add(canonicalURL(id, site).href);
  }
  const pages = [...uniqueURLs];
  pages.sort((a, b) => a.localeCompare(b, "en", {numeric: true}));
  let sitemap = `<?xml version="1.0" encoding="UTF-8"?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`;
  for (const page of pages) {
    sitemap += `<url><loc>${page}</loc></url>`;
  }
  sitemap += `</urlset>
`;
  return sitemap;
}

// src/runtime.ts
import "source-map-support/register.js";
import resolve2 from "resolve";
import {existsSync as existsSync3, promises as fs2} from "fs";
import {fileURLToPath as fileURLToPath5} from "url";
import {posix as path6} from "path";
import {performance as performance3} from "perf_hooks";
import {
  loadConfiguration,
  logger as snowpackLogger,
  NotFoundError,
  startServer as startSnowpackServer
} from "snowpack";
import {CompileError} from "@astrojs/parser";

// src/snowpack-logger.ts
function configureSnowpackLogger(logger2) {
  if (defaultLogLevel === "debug") {
    logger2.level = "debug";
  } else if (defaultLogLevel === "silent") {
    logger2.level = "silent";
  }
}

// src/search.ts
import "source-map-support/register.js";
import {existsSync as existsSync2} from "fs";
import path4 from "path";
import {fileURLToPath as fileURLToPath3} from "url";
import glob from "tiny-glob/sync.js";
function findAnyPage(candidates, astroConfig) {
  for (let candidate of candidates) {
    const url = new URL(`./${candidate}`, astroConfig.pages);
    if (existsSync2(url)) {
      const pagesPath = astroConfig.pages.pathname.replace(astroConfig.projectRoot.pathname, "");
      return {
        fileURL: url,
        snowpackURL: `/_astro/${pagesPath}${candidate}.js`
      };
    }
  }
  return false;
}
function searchForPage(url, astroConfig) {
  const reqPath = decodeURI(url.pathname);
  const base = reqPath.substr(1);
  if (reqPath.endsWith("/")) {
    const candidates2 = [`${base}index.astro`, `${base}index.md`];
    const location2 = findAnyPage(candidates2, astroConfig);
    if (location2) {
      return {
        statusCode: 200,
        location: location2,
        pathname: reqPath
      };
    }
  } else {
    const candidates2 = [`${base}.astro`, `${base}.md`];
    let location2 = findAnyPage(candidates2, astroConfig);
    if (location2) {
      return {
        statusCode: 200,
        location: location2,
        pathname: reqPath
      };
    }
  }
  const candidates = [`${base}/index.astro`, `${base}/index.md`];
  const location = findAnyPage(candidates, astroConfig);
  if (location) {
    return {
      statusCode: 301,
      location: null,
      pathname: reqPath + "/"
    };
  }
  const hasExt = !!path4.extname(reqPath);
  if (!location && !hasExt) {
    const collection = loadCollection(reqPath, astroConfig);
    if (collection) {
      return {
        statusCode: 200,
        location: collection.location,
        pathname: reqPath,
        currentPage: collection.currentPage || 1
      };
    }
  }
  if (reqPath === "/500") {
    return {
      statusCode: 200,
      location: {
        fileURL: new URL("./frontend/500.astro", import.meta.url),
        snowpackURL: `/_astro_frontend/500.astro.js`
      },
      pathname: reqPath
    };
  }
  return {
    statusCode: 404
  };
}
function loadCollection(url, astroConfig) {
  const pages = glob("**/$*.astro", {cwd: fileURLToPath3(astroConfig.pages), filesOnly: true});
  for (const pageURL of pages) {
    const reqURL = new RegExp("^/" + pageURL.replace(/\$([^/]+)\.astro/, "$1") + "(?:/(.*)|/?$)");
    const match = url.match(reqURL);
    if (match) {
      let currentPage;
      if (match[1]) {
        const segments = match[1].split("/").filter((s) => !!s);
        if (segments.length) {
          const last = segments.pop();
          if (parseInt(last, 10)) {
            currentPage = parseInt(last, 10);
          }
        }
      }
      const pagesPath = astroConfig.pages.pathname.replace(astroConfig.projectRoot.pathname, "");
      return {
        location: {
          fileURL: new URL(`./${pageURL}`, astroConfig.pages),
          snowpackURL: `/_astro/${pagesPath}${pageURL}.js`
        },
        currentPage
      };
    }
  }
}

// src/external.ts
import {createRequire} from "module";

// src/node_builtins.ts
import {builtinModules} from "module";
var nodeBuiltinsSet = new Set(builtinModules);
var nodeBuiltinsMap = new Map(builtinModules.map((bareName) => [bareName, "node:" + bareName]));

// src/external.ts
var require2 = createRequire(import.meta.url);
var pkg = require2("../package.json");
var allowList = new Set(["astring", "@astrojs/prism", "estree-util-value-to-estree", "prismjs", "shorthash"]);
var isAstroRenderer = (name) => {
  return name.startsWith(`@astrojs/renderer-`);
};
var denyList = ["prismjs/components/index.js", "@vue/server-renderer", "@astrojs/markdown-support", "node:fs/promises", ...nodeBuiltinsMap.values()];
var external_default = Object.keys(pkg.dependencies).filter((name) => {
  if (allowList.has(name))
    return false;
  if (isAstroRenderer(name))
    return false;
  return true;
}).concat(denyList).sort();

// src/config_manager.ts
import {posix as path5} from "path";
import {fileURLToPath as fileURLToPath4, pathToFileURL} from "url";
import resolve from "resolve";
var CONFIG_MODULE_BASE_NAME = "__astro_config.js";
var CONFIG_MODULE_URL = `/_astro_frontend/${CONFIG_MODULE_BASE_NAME}`;
var DEFAULT_RENDERERS = ["@astrojs/renderer-vue", "@astrojs/renderer-svelte", "@astrojs/renderer-react", "@astrojs/renderer-preact"];
var ConfigManager = class {
  constructor(astroConfig, resolvePackageUrl) {
    this.astroConfig = astroConfig;
    this.resolvePackageUrl = resolvePackageUrl;
    this.state = "initial";
    this.snowpackRuntime = null;
    this.configModuleId = null;
    this.version = 1;
    this.setRendererNames(this.astroConfig);
  }
  markDirty() {
    this.state = "dirty";
  }
  async update() {
    if (this.needsUpdate() && this.snowpackRuntime) {
      if (this.state === "dirty") {
        const version = this.version++;
        const astroConfig = await loadConfig(this.astroConfig.projectRoot.pathname, `astro.config.mjs?version=${version}`);
        this.setRendererNames(astroConfig);
      }
      await this.importModule(this.snowpackRuntime);
      this.state = "clean";
    }
  }
  isConfigModule(fileExt, filename) {
    return fileExt === ".js" && filename.endsWith(CONFIG_MODULE_BASE_NAME);
  }
  isAstroConfig(filename) {
    const {projectRoot} = this.astroConfig;
    return new URL("./astro.config.mjs", projectRoot).pathname === filename;
  }
  async buildRendererInstances() {
    const {projectRoot} = this.astroConfig;
    const rendererNames = this.rendererNames;
    const resolveDependency = (dep) => resolve.sync(dep, {basedir: fileURLToPath4(projectRoot)});
    const rendererInstances = (await Promise.all(rendererNames.map(async (rendererName) => {
      let _options = null;
      if (Array.isArray(rendererName)) {
        _options = rendererName[1];
        rendererName = rendererName[0];
      }
      const entrypoint = pathToFileURL(resolveDependency(rendererName)).toString();
      const r = await import(entrypoint);
      return {
        raw: r.default,
        options: _options
      };
    }))).map(({raw, options}, i) => {
      const {name = rendererNames[i], client, server, snowpackPlugin: snowpackPluginName, snowpackPluginOptions} = raw;
      if (typeof client !== "string" && client != null) {
        throw new Error(`Expected "client" from ${name} to be a relative path to the client-side renderer!`);
      }
      if (typeof server !== "string") {
        throw new Error(`Expected "server" from ${name} to be a relative path to the server-side renderer!`);
      }
      let snowpackPlugin;
      if (typeof snowpackPluginName === "string") {
        if (snowpackPluginOptions) {
          snowpackPlugin = [resolveDependency(snowpackPluginName), snowpackPluginOptions];
        } else {
          snowpackPlugin = resolveDependency(snowpackPluginName);
        }
      } else if (snowpackPluginName) {
        throw new Error(`Expected the snowpackPlugin from ${name} to be a "string" but encountered "${typeof snowpackPluginName}"!`);
      }
      const polyfillsNormalized = (raw.polyfills || []).map((p) => p.startsWith(".") ? path5.join(name, p) : p);
      const hydrationPolyfillsNormalized = (raw.hydrationPolyfills || []).map((p) => p.startsWith(".") ? path5.join(name, p) : p);
      return {
        name,
        options,
        snowpackPlugin,
        client: raw.client ? path5.join(name, raw.client) : null,
        server: path5.join(name, raw.server),
        knownEntrypoints: raw.knownEntrypoints,
        external: raw.external,
        polyfills: polyfillsNormalized,
        hydrationPolyfills: hydrationPolyfillsNormalized
      };
    });
    return rendererInstances;
  }
  async buildSource(contents) {
    const renderers = await this.buildRendererInstances();
    const rendererServerPackages = renderers.map(({server}) => server);
    const rendererClientPackages = await Promise.all(renderers.filter(({client}) => client).map(({client}) => this.resolvePackageUrl(client)));
    const rendererPolyfills = await Promise.all(renderers.map(({polyfills}) => Promise.all(polyfills.map((src) => this.resolvePackageUrl(src)))));
    const rendererHydrationPolyfills = await Promise.all(renderers.map(({hydrationPolyfills}) => Promise.all(hydrationPolyfills.map((src) => this.resolvePackageUrl(src)))));
    const result = `${rendererServerPackages.map((pkg2, i) => `import __renderer_${i} from "${pkg2}";`).join("\n")}

import { setRenderers } from 'astro/dist/internal/__astro_component.js';

let rendererInstances = [${renderers.map((r, i) => `{
  source: ${rendererClientPackages[i] ? `"${rendererClientPackages[i]}"` : "null"},
  renderer: typeof __renderer_${i} === 'function' ? __renderer_${i}(${r.options ? JSON.stringify(r.options) : "null"}) : __renderer_${i},
  polyfills: ${JSON.stringify(rendererPolyfills[i])},
  hydrationPolyfills: ${JSON.stringify(rendererHydrationPolyfills[i])}
}`).join(", ")}];

${contents}
`;
    return result;
  }
  needsUpdate() {
    return this.state === "initial" || this.state === "dirty";
  }
  setRendererNames(astroConfig) {
    this.rendererNames = astroConfig.renderers || DEFAULT_RENDERERS;
  }
  async importModule(snowpackRuntime) {
    await snowpackRuntime.importModule(CONFIG_MODULE_URL);
  }
};

// src/runtime.ts
configureSnowpackLogger(snowpackLogger);
async function load(config, rawPathname) {
  const {logging: logging3, snowpackRuntime, snowpack, configManager} = config;
  const {buildOptions, devOptions} = config.astroConfig;
  let origin = buildOptions.site ? new URL(buildOptions.site).origin : `http://localhost:${devOptions.port}`;
  const fullurl = new URL(rawPathname || "/", origin);
  const reqPath = decodeURI(fullurl.pathname);
  info(logging3, "access", reqPath);
  const searchResult = searchForPage(fullurl, config.astroConfig);
  if (searchResult.statusCode === 404) {
    try {
      const result = await snowpack.loadUrl(reqPath);
      if (!result)
        throw new Error(`Unable to load ${reqPath}`);
      return __spreadValues({
        statusCode: 200
      }, result);
    } catch (err) {
      if (err.failed) {
        return {statusCode: 500, type: "unknown", error: err};
      }
      return {statusCode: 404, error: err};
    }
  }
  if (searchResult.statusCode === 301) {
    return {statusCode: 301, location: searchResult.pathname};
  }
  const snowpackURL = searchResult.location.snowpackURL;
  let rss = {};
  try {
    if (configManager.needsUpdate()) {
      await configManager.update();
    }
    const mod = await snowpackRuntime.importModule(snowpackURL);
    debug(logging3, "resolve", `${reqPath} -> ${snowpackURL}`);
    let collection = {};
    let additionalURLs = new Set();
    if (mod.exports.createCollection) {
      const createCollection = await mod.exports.createCollection();
      const VALID_KEYS = new Set(["data", "routes", "permalink", "pageSize", "rss"]);
      for (const key of Object.keys(createCollection)) {
        if (!VALID_KEYS.has(key)) {
          throw new Error(`[createCollection] unknown option: "${key}". Expected one of ${[...VALID_KEYS].join(", ")}.`);
        }
      }
      let {data: loadData, routes, permalink, pageSize, rss: createRSS} = createCollection;
      if (!loadData)
        throw new Error(`[createCollection] must return \`data()\` function to create a collection.`);
      if (!pageSize)
        pageSize = 25;
      let currentParams = {};
      if (routes || permalink) {
        if (!routes)
          throw new Error("[createCollection] `permalink` requires `routes` as well.");
        if (!permalink)
          throw new Error("[createCollection] `routes` requires `permalink` as well.");
        let requestedParams = routes.find((p) => {
          const baseURL = permalink({params: p});
          additionalURLs.add(baseURL);
          return baseURL === reqPath || `${baseURL}/${searchResult.currentPage || 1}` === reqPath;
        });
        if (requestedParams) {
          currentParams = requestedParams;
          collection.params = requestedParams;
        }
      }
      let data = await loadData({params: currentParams});
      if (!data)
        throw new Error(`[createCollection] \`data()\` returned nothing (empty data)"`);
      if (!Array.isArray(data))
        data = [data];
      if (createRSS) {
        rss = __spreadProps(__spreadValues({}, createRSS), {
          data: [...data]
        });
      }
      collection.start = 0;
      collection.end = data.length - 1;
      collection.total = data.length;
      collection.page = {current: 1, size: pageSize, last: 1};
      collection.url = {current: reqPath};
      if (searchResult.currentPage) {
        const start = pageSize === Infinity ? 0 : (searchResult.currentPage - 1) * pageSize;
        const end = Math.min(start + pageSize, data.length);
        collection.start = start;
        collection.end = end - 1;
        collection.page.current = searchResult.currentPage;
        collection.page.last = Math.ceil(data.length / pageSize);
        if (end < data.length) {
          collection.url.next = collection.url.current.replace(/(\/\d+)?$/, `/${searchResult.currentPage + 1}`);
        }
        if (searchResult.currentPage > 1) {
          collection.url.prev = collection.url.current.replace(/\d+$/, `${searchResult.currentPage - 1 || 1}`).replace(/\/1$/, "");
        }
        for (let n = 1; n <= collection.page.last; n++) {
          if (additionalURLs.size) {
            additionalURLs.forEach((url) => {
              additionalURLs.add(url.replace(/(\/\d+)?$/, `/${n}`));
            });
          } else {
            additionalURLs.add(reqPath.replace(/(\/\d+)?$/, `/${n}`));
          }
        }
        data = data.slice(start, end);
      } else if (createCollection.pageSize) {
        return {
          statusCode: 301,
          location: reqPath + "/1",
          collectionInfo: {
            additionalURLs,
            rss: rss.data ? rss : void 0
          }
        };
      }
      if (!data.length) {
        return {
          statusCode: 404,
          error: new Error("Not Found"),
          collectionInfo: {
            additionalURLs,
            rss: rss.data ? rss : void 0
          }
        };
      }
      collection.data = data;
    }
    const requestURL = new URL(fullurl.toString());
    if (reqPath !== "/500") {
      requestURL.search = "";
    }
    let html = await mod.exports.__renderPage({
      request: {
        url: requestURL,
        canonicalURL: canonicalURL(requestURL.pathname, requestURL.origin)
      },
      children: [],
      props: Object.keys(collection).length > 0 ? {collection} : {},
      css: Array.isArray(mod.css) ? mod.css : typeof mod.css === "string" ? [mod.css] : []
    });
    return {
      statusCode: 200,
      contentType: "text/html; charset=utf-8",
      contents: html,
      collectionInfo: {
        additionalURLs,
        rss: rss.data ? rss : void 0
      }
    };
  } catch (err) {
    if (err.code === "parse-error" || err instanceof SyntaxError) {
      return {
        statusCode: 500,
        type: "parse-error",
        error: err
      };
    }
    if (err instanceof ReferenceError && err.toString().includes("window is not defined")) {
      return {
        statusCode: 500,
        type: "ssr",
        error: new Error(`[${reqPath}]
    The window object is not available during server-side rendering (SSR).
    Try using \`import.meta.env.SSR\` to write SSR-friendly code.
    https://github.com/snowpackjs/astro/blob/main/docs/reference/api-reference.md#importmeta`)
      };
    }
    if (err instanceof NotFoundError && rawPathname) {
      const fileMatch = err.toString().match(/\(([^\)]+)\)/);
      const missingFile = fileMatch && fileMatch[1].replace(/^\/_astro/, "").replace(/\.proxy\.js$/, "") || void 0;
      const distPath = path6.extname(rawPathname) ? rawPathname : rawPathname.replace(/\/?$/, "/index.html");
      const srcFile = getSrcPath(distPath, {astroConfig: config.astroConfig});
      const code = existsSync3(srcFile) ? await fs2.readFile(srcFile, "utf8") : "";
      let start = 0;
      const segments = missingFile ? missingFile.split("/").filter((segment) => !!segment) : [];
      while (segments.length) {
        const importMatch = code.indexOf(segments.join("/"));
        if (importMatch >= 0) {
          start = importMatch;
          break;
        }
        segments.shift();
      }
      return {
        statusCode: 500,
        type: "not-found",
        error: new CompileError({
          code,
          filename: srcFile.pathname,
          start,
          message: `Could not find${missingFile ? ` "${missingFile}"` : " file"}`
        })
      };
    }
    return {
      statusCode: 500,
      type: "unknown",
      error: err
    };
  }
}
async function createSnowpack(astroConfig, options) {
  var _a;
  const {projectRoot, src} = astroConfig;
  const {mode, resolvePackageUrl} = options;
  const frontendPath = new URL("./frontend/", import.meta.url);
  const resolveDependency = (dep) => resolve2.sync(dep, {basedir: fileURLToPath5(projectRoot)});
  const isHmrEnabled = mode === "development";
  const configManager = new ConfigManager(astroConfig, resolvePackageUrl);
  let snowpack;
  let astroPluginOptions = {
    astroConfig,
    mode,
    resolvePackageUrl,
    configManager
  };
  const mountOptions = __spreadProps(__spreadValues({}, existsSync3(astroConfig.public) ? {[fileURLToPath5(astroConfig.public)]: "/"} : {}), {
    [fileURLToPath5(frontendPath)]: "/_astro_frontend",
    [fileURLToPath5(src)]: "/_astro/src"
  });
  if (astroConfig.devOptions.tailwindConfig) {
    process.env.TAILWIND_DISABLE_TOUCH = true;
  }
  const rendererInstances = await configManager.buildRendererInstances();
  const knownEntrypoints = ["astro/dist/internal/__astro_component.js", "astro/dist/internal/element-registry.js"];
  for (const renderer of rendererInstances) {
    knownEntrypoints.push(renderer.server);
    if (renderer.client) {
      knownEntrypoints.push(renderer.client);
    }
    if (renderer.knownEntrypoints) {
      knownEntrypoints.push(...renderer.knownEntrypoints);
    }
    knownEntrypoints.push(...renderer.polyfills);
    knownEntrypoints.push(...renderer.hydrationPolyfills);
  }
  const external = external_default.concat([]);
  for (const renderer of rendererInstances) {
    if (renderer.external) {
      external.push(...renderer.external);
    }
  }
  const rendererSnowpackPlugins = rendererInstances.filter((renderer) => renderer.snowpackPlugin).map((renderer) => renderer.snowpackPlugin);
  const snowpackConfig = await loadConfiguration({
    root: fileURLToPath5(projectRoot),
    mount: mountOptions,
    mode,
    plugins: [
      [fileURLToPath5(new URL("../snowpack-plugin.cjs", import.meta.url)), astroPluginOptions],
      ...rendererSnowpackPlugins,
      resolveDependency("@snowpack/plugin-sass"),
      [
        resolveDependency("@snowpack/plugin-postcss"),
        {
          config: {
            plugins: __spreadValues({
              [resolveDependency("autoprefixer")]: {}
            }, astroConfig.devOptions.tailwindConfig ? {[resolveDependency("tailwindcss")]: astroConfig.devOptions.tailwindConfig} : {})
          }
        }
      ]
    ],
    devOptions: {
      open: "none",
      output: "stream",
      port: 0,
      hmr: isHmrEnabled,
      tailwindConfig: astroConfig.devOptions.tailwindConfig
    },
    buildOptions: {
      baseUrl: astroConfig.buildOptions.site || "/",
      out: astroConfig.dist
    },
    packageOptions: {
      knownEntrypoints,
      external
    }
  });
  const polyfillNode = snowpackConfig.packageOptions.polyfillNode;
  if (!polyfillNode) {
    snowpackConfig.alias = Object.assign({}, Object.fromEntries(nodeBuiltinsMap), (_a = snowpackConfig.alias) != null ? _a : {});
  }
  snowpack = await startSnowpackServer({
    config: snowpackConfig,
    lockfile: null
  }, {
    isWatch: mode === "development"
  });
  const snowpackRuntime = snowpack.getServerRuntime();
  astroPluginOptions.configManager.snowpackRuntime = snowpackRuntime;
  return {snowpack, snowpackRuntime, snowpackConfig, configManager};
}
async function createRuntime(astroConfig, {mode, logging: logging3}) {
  let snowpack;
  const timer = {};
  const resolvePackageUrl = async (pkgName) => snowpack.getUrlForPackage(pkgName);
  timer.backend = performance3.now();
  const {
    snowpack: snowpackInstance,
    snowpackRuntime,
    snowpackConfig,
    configManager
  } = await createSnowpack(astroConfig, {
    mode,
    resolvePackageUrl
  });
  snowpack = snowpackInstance;
  debug(logging3, "core", `snowpack created [${stopTimer(timer.backend)}]`);
  const runtimeConfig = {
    astroConfig,
    logging: logging3,
    mode,
    snowpack,
    snowpackRuntime,
    snowpackConfig,
    configManager
  };
  return {
    runtimeConfig,
    load: load.bind(null, runtimeConfig),
    shutdown: () => snowpack.shutdown()
  };
}

// src/build.ts
var defaultLogging = {
  level: defaultLogLevel,
  dest: defaultLogDestination
};
async function allPages(root) {
  const cwd = fileURLToPath6(root);
  const files = await glob2("**/*.{astro,md}", {cwd, filesOnly: true});
  return files.map((f) => new URL(f, root));
}
function isRemote(url) {
  if (url.startsWith("http://") || url.startsWith("https://") || url.startsWith("//"))
    return true;
  return false;
}
async function build(astroConfig, logging3 = defaultLogging) {
  const {projectRoot, pages: pagesRoot} = astroConfig;
  const dist = new URL(astroConfig.dist + "/", projectRoot);
  const buildState = {};
  const depTree = {};
  const timer = {};
  const runtimeLogging = {
    level: "error",
    dest: defaultLogDestination
  };
  if (!astroConfig.buildOptions.site) {
    warn(logging3, "config", `Set "buildOptions.site" to generate correct canonical URLs and sitemap`);
  }
  const mode = "production";
  const runtime = await createRuntime(astroConfig, {mode, logging: runtimeLogging});
  const {runtimeConfig} = runtime;
  const {snowpack} = runtimeConfig;
  try {
    await del(fileURLToPath6(dist));
    timer.build = performance4.now();
    const pages = await allPages(pagesRoot);
    info(logging3, "build", yellow2("! building pages..."));
    try {
      await Promise.all(pages.map((filepath) => {
        const buildPage = getPageType(filepath) === "collection" ? buildCollectionPage : buildStaticPage;
        return buildPage({
          astroConfig,
          buildState,
          filepath,
          logging: logging3,
          mode,
          resolvePackageUrl: (pkgName) => snowpack.getUrlForPackage(pkgName),
          runtime,
          site: astroConfig.buildOptions.site
        });
      }));
    } catch (e) {
      if (e.filename) {
        let stack = e.stack.replace(/Object\.__render \(/gm, "").replace(/\/_astro\/(.+)\.astro\.js\:\d+\:\d+\)/gm, (_, $1) => "file://" + fileURLToPath6(projectRoot) + $1 + ".astro").split("\n");
        stack.splice(1, 0, `    at file://${e.filename}`);
        stack = stack.join("\n");
        error(logging3, "build", `${red2(`Unable to render ${underline3(e.filename.replace(fileURLToPath6(projectRoot), ""))}`)}

${stack}
`);
      } else {
        error(logging3, "build", e);
      }
      error(logging3, "build", red2("\u2715 building pages failed!"));
      await runtime.shutdown();
      return 1;
    }
    info(logging3, "build", green("\u2714"), "pages built.");
    debug(logging3, "build", `built pages [${stopTimer(timer.build)}]`);
    timer.deps = performance4.now();
    const scanPromises = [];
    await eslexer.init;
    for (const id of Object.keys(buildState)) {
      if (buildState[id].contentType !== "text/html")
        continue;
      const pageDeps = findDeps(buildState[id].contents, {
        astroConfig,
        srcPath: buildState[id].srcPath
      });
      depTree[id] = pageDeps;
      for (const url of [...pageDeps.js, ...pageDeps.css, ...pageDeps.images]) {
        if (!buildState[url])
          scanPromises.push(runtime.load(url).then((result) => {
            if (result.statusCode !== 200) {
              if (result.statusCode === 404) {
                throw new Error(`${buildState[id].srcPath.href}: could not find "${path7.basename(url)}"`);
              }
              throw result.error || new Error(`unexpected status ${result.statusCode} when loading ${url}`);
            }
            buildState[url] = {
              srcPath: new URL(url, projectRoot),
              contents: result.contents,
              contentType: result.contentType || mime.getType(url) || ""
            };
          }));
      }
    }
    await Promise.all(scanPromises);
    debug(logging3, "build", `scanned deps [${stopTimer(timer.deps)}]`);
    info(logging3, "build", yellow2("! optimizing css..."));
    timer.prebundle = performance4.now();
    await Promise.all([
      bundleCSS({buildState, astroConfig, logging: logging3, depTree}).then(() => {
        debug(logging3, "build", `bundled CSS [${stopTimer(timer.prebundle)}]`);
      })
    ]);
    info(logging3, "build", green("\u2714"), "css optimized.");
    const urlStats = await collectBundleStats(buildState, depTree);
    const jsImports = await collectJSImports(buildState);
    if (astroConfig.buildOptions.sitemap && astroConfig.buildOptions.site) {
      timer.sitemap = performance4.now();
      info(logging3, "build", yellow2("! creating sitemap..."));
      const sitemap = generateSitemap(buildState, astroConfig.buildOptions.site);
      const sitemapPath = new URL("sitemap.xml", dist);
      await fs3.promises.mkdir(path7.dirname(fileURLToPath6(sitemapPath)), {recursive: true});
      await fs3.promises.writeFile(sitemapPath, sitemap, "utf8");
      info(logging3, "build", green("\u2714"), "sitemap built.");
      debug(logging3, "build", `built sitemap [${stopTimer(timer.sitemap)}]`);
    }
    timer.write = performance4.now();
    await Promise.all(Object.keys(buildState).map(async (id) => {
      const outPath = new URL(`.${id}`, dist);
      const parentDir = path7.dirname(fileURLToPath6(outPath));
      await fs3.promises.mkdir(parentDir, {recursive: true});
      await fs3.promises.writeFile(outPath, buildState[id].contents, buildState[id].encoding);
      delete buildState[id];
      delete depTree[id];
    }));
    debug(logging3, "build", `wrote files to disk [${stopTimer(timer.write)}]`);
    if (fs3.existsSync(astroConfig.public)) {
      info(logging3, "build", yellow2(`! copying public folder...`));
      timer.public = performance4.now();
      const cwd = fileURLToPath6(astroConfig.public);
      const publicFiles = await glob2("**/*", {cwd, filesOnly: true});
      await Promise.all(publicFiles.map(async (filepath) => {
        const srcPath = new URL(filepath, astroConfig.public);
        const distPath = new URL(filepath, dist);
        await fs3.promises.mkdir(path7.dirname(fileURLToPath6(distPath)), {recursive: true});
        await fs3.promises.copyFile(srcPath, distPath);
      }));
      debug(logging3, "build", `copied public folder [${stopTimer(timer.public)}]`);
      info(logging3, "build", green("\u2714"), "public folder copied.");
    } else {
      if (path7.basename(astroConfig.public.toString()) !== "public") {
        info(logging3, "tip", yellow2(`! no public folder ${astroConfig.public} found...`));
      }
    }
    info(logging3, "build", yellow2(`! bundling...`));
    if (jsImports.size > 0) {
      timer.bundleJS = performance4.now();
      const jsStats = await bundleJS(jsImports, {dist: new URL(dist + "/", projectRoot), runtime});
      mapBundleStatsToURLStats({urlStats, depTree, bundleStats: jsStats});
      debug(logging3, "build", `bundled JS [${stopTimer(timer.bundleJS)}]`);
      info(logging3, "build", green(`\u2714`), "bundling complete.");
    }
    logURLStats(logging3, urlStats);
    await runtime.shutdown();
    info(logging3, "build", bold3(green("\u25B6 Build Complete!")));
    return 0;
  } catch (err) {
    error(logging3, "build", err);
    await runtime.shutdown();
    return 1;
  }
}
function findDeps(html, {astroConfig, srcPath}) {
  const pageDeps = {
    js: new Set(),
    css: new Set(),
    images: new Set()
  };
  const $ = cheerio2.load(html);
  $("script").each((i, el) => {
    const src = $(el).attr("src");
    if (src) {
      if (isRemote(src))
        return;
      pageDeps.js.add(getDistPath(src, {astroConfig, srcPath}));
    } else {
      const text = $(el).html();
      if (!text)
        return;
      const [imports] = eslexer.parse(text);
      for (const spec of imports) {
        const importSrc = spec.n;
        if (importSrc && !isRemote(importSrc)) {
          pageDeps.js.add(getDistPath(importSrc, {astroConfig, srcPath}));
        }
      }
    }
  });
  $("link[href]").each((i, el) => {
    const href = $(el).attr("href");
    if (href && !isRemote(href) && ($(el).attr("rel") === "stylesheet" || $(el).attr("type") === "text/css" || href.endsWith(".css"))) {
      const dist = getDistPath(href, {astroConfig, srcPath});
      pageDeps.css.add(dist);
    }
  });
  $("img[src]").each((i, el) => {
    const src = $(el).attr("src");
    if (src && !isRemote(src)) {
      pageDeps.images.add(getDistPath(src, {astroConfig, srcPath}));
    }
  });
  return pageDeps;
}

// src/dev.ts
import "source-map-support/register.js";
import {green as green2} from "kleur/colors";
import http from "http";
import path8 from "path";
import {performance as performance5} from "perf_hooks";
var hostname = "127.0.0.1";
var logging = {
  level: defaultLogLevel,
  dest: defaultLogDestination
};
async function dev(astroConfig) {
  const startServerTime = performance5.now();
  const {projectRoot} = astroConfig;
  const timer = {};
  timer.runtime = performance5.now();
  const runtime = await createRuntime(astroConfig, {mode: "development", logging});
  debug(logging, "dev", `runtime created [${stopTimer(timer.runtime)}]`);
  const server = http.createServer(async (req, res) => {
    timer.load = performance5.now();
    const result = await runtime.load(req.url);
    debug(logging, "dev", `loaded ${req.url} [${stopTimer(timer.load)}]`);
    switch (result.statusCode) {
      case 200: {
        if (result.contentType) {
          res.setHeader("Content-Type", result.contentType);
        }
        res.statusCode = 200;
        res.write(result.contents);
        res.end();
        break;
      }
      case 301:
      case 302: {
        res.statusCode = result.statusCode;
        res.setHeader("Location", result.location);
        res.end();
        break;
      }
      case 404: {
        const fullurl = new URL(req.url || "/", astroConfig.buildOptions.site || `http://localhost${astroConfig.devOptions.port}`);
        const reqPath = decodeURI(fullurl.pathname);
        error(logging, "static", "Not found", reqPath);
        res.statusCode = 404;
        const fourOhFourResult = await runtime.load("/404");
        if (fourOhFourResult.statusCode === 200) {
          if (fourOhFourResult.contentType) {
            res.setHeader("Content-Type", fourOhFourResult.contentType);
          }
          res.write(fourOhFourResult.contents);
        } else {
          res.setHeader("Content-Type", "text/plain");
          res.write("Not Found");
        }
        res.end();
        break;
      }
      case 500: {
        res.setHeader("Content-Type", "text/html;charset=utf-8");
        switch (result.type) {
          case "parse-error": {
            const err = result.error;
            if (err.filename)
              err.filename = path8.posix.relative(projectRoot.pathname, err.filename);
            parseError(logging, err);
            break;
          }
          default: {
            error(logging, "executing astro", result.error);
            break;
          }
        }
        res.statusCode = 500;
        let errorResult = await runtime.load(`/500?error=${encodeURIComponent(result.error.stack || result.error.toString())}`);
        if (errorResult.statusCode === 200) {
          if (errorResult.contentType) {
            res.setHeader("Content-Type", errorResult.contentType);
          }
          res.write(errorResult.contents);
        } else {
          res.write(result.error.toString());
        }
        res.end();
        break;
      }
    }
  });
  const port = astroConfig.devOptions.port;
  server.listen(port, hostname, () => {
    const endServerTime = performance5.now();
    info(logging, "dev server", green2(`Server started in ${Math.floor(endServerTime - startServerTime)}ms.`));
    info(logging, "dev server", `${green2("Local:")} http://${hostname}:${port}/`);
  }).on("error", (err) => {
    if (err.code && err.code === "EADDRINUSE") {
      error(logging, "dev server", `Address ${hostname}:${port} already in use. Try changing devOptions.port in your config file`);
    } else {
      error(logging, "dev server", err.stack);
    }
    process.exit(1);
  });
}

// src/reload.ts
import {clearCache} from "snowpack";
var logging2 = {
  level: defaultLogLevel,
  dest: defaultLogDestination
};
async function reload() {
  try {
    info(logging2, "reload", `Clearing the cache...`);
    await clearCache();
    return 0;
  } catch {
    return 1;
  }
}

// src/cli.ts
var {readFile} = fsPromises;
var buildAndExit = async (astroConfig) => {
  const ret = await build(astroConfig);
  process.exit(ret);
};
var reloadAndExit = async () => {
  const ret = await reload();
  process.exit(ret);
};
function resolveArgs(flags) {
  const options = {
    projectRoot: typeof flags.projectRoot === "string" ? flags.projectRoot : void 0,
    sitemap: typeof flags.sitemap === "boolean" ? flags.sitemap : void 0,
    port: typeof flags.port === "number" ? flags.port : void 0,
    config: typeof flags.config === "string" ? flags.config : void 0
  };
  if (flags.version) {
    return {cmd: "version", options};
  } else if (flags.help) {
    return {cmd: "help", options};
  }
  const cmd = flags._[2];
  switch (cmd) {
    case "dev":
      return {cmd: "dev", options};
    case "build":
      return {cmd: "build", options};
    default:
      if (flags.reload) {
        return {cmd: "reload", options};
      }
      return {cmd: "help", options};
  }
}
function printHelp() {
  console.error(`  ${bold4("astro")} - Futuristic web development tool.

  ${bold4("Commands:")}
  astro dev             Run Astro in development mode.
  astro build           Build a pre-compiled production version of your site.

  ${bold4("Flags:")}
  --config <path>       Specify the path to the Astro config file.
  --project-root <path> Specify the path to the project root folder.
  --no-sitemap          Disable sitemap generation (build only).
  --reload              Clean the cache, reinstalling dependencies.
  --verbose             Enable verbose logging
  --silent              Disable logging
  --version             Show the version number and exit.
  --help                Show this help message.
`);
}
async function printVersion() {
  const pkg2 = JSON.parse(await readFile(new URL("../package.json", import.meta.url), "utf-8"));
  console.error(pkg2.version);
}
function mergeCLIFlags(astroConfig, flags) {
  if (typeof flags.sitemap === "boolean")
    astroConfig.buildOptions.sitemap = flags.sitemap;
  if (typeof flags.port === "number")
    astroConfig.devOptions.port = flags.port;
}
async function runCommand(rawRoot, cmd, options) {
  try {
    const projectRoot = options.projectRoot || rawRoot;
    const astroConfig = await loadConfig(projectRoot, options.config);
    mergeCLIFlags(astroConfig, options);
    return cmd(astroConfig, options);
  } catch (err) {
    console.error(red3(err.toString() || err));
    process.exit(1);
  }
}
var cmdMap = new Map([
  ["build", buildAndExit],
  ["dev", dev],
  ["reload", reloadAndExit]
]);
async function cli(args) {
  const flags = yargs(args);
  const state = resolveArgs(flags);
  switch (state.cmd) {
    case "help": {
      printHelp();
      process.exit(1);
      break;
    }
    case "version": {
      await printVersion();
      process.exit(0);
      break;
    }
    case "reload": {
      await reloadAndExit();
      break;
    }
    case "build":
    case "dev": {
      if (flags.reload) {
        await reload();
      }
      const cmd = cmdMap.get(state.cmd);
      if (!cmd)
        throw new Error(`Error running ${state.cmd}`);
      runCommand(flags._[3], cmd, state.options);
      break;
    }
  }
}
export {
  cli
};
//# sourceMappingURL=data:application/json;base64,
