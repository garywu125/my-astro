var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/config_manager.ts
import {posix as path2} from "path";
import {fileURLToPath, pathToFileURL} from "url";
import resolve from "resolve";

// src/config.ts
import "source-map-support/register.js";
import path from "path";
import {existsSync} from "fs";
var type = (thing) => Array.isArray(thing) ? "Array" : typeof thing;
function validateConfig(config) {
  var _a, _b, _c, _d, _e;
  if (config === void 0 || config === null)
    throw new Error(`[config] Config empty!`);
  if (typeof config !== "object")
    throw new Error(`[config] Expected object, received ${typeof config}`);
  for (const key of ["projectRoot", "pages", "dist", "public"]) {
    if (config[key] !== void 0 && config[key] !== null && typeof config[key] !== "string") {
      throw new Error(`[config] ${key}: ${JSON.stringify(config[key])}
  Expected string, received ${type(config[key])}.`);
    }
  }
  for (const key of ["sitemap"]) {
    if (config[key] !== void 0 && config[key] !== null && typeof config[key] !== "boolean") {
      throw new Error(`[config] ${key}: ${JSON.stringify(config[key])}
  Expected boolean, received ${type(config[key])}.`);
    }
  }
  if (config.buildOptions) {
    if (config.buildOptions.site !== void 0) {
      if (typeof config.buildOptions.site !== "string")
        throw new Error(`[config] buildOptions.site is not a string`);
      try {
        new URL(config.buildOptions.site);
      } catch (err) {
        throw new Error("[config] buildOptions.site must be a valid URL");
      }
    }
  }
  if (typeof ((_a = config.devOptions) == null ? void 0 : _a.port) !== "number") {
    throw new Error(`[config] devOptions.port: Expected number, received ${type((_b = config.devOptions) == null ? void 0 : _b.port)}`);
  }
  if (((_c = config.devOptions) == null ? void 0 : _c.tailwindConfig) !== void 0 && typeof ((_d = config.devOptions) == null ? void 0 : _d.tailwindConfig) !== "string") {
    throw new Error(`[config] devOptions.tailwindConfig: Expected string, received ${type((_e = config.devOptions) == null ? void 0 : _e.tailwindConfig)}`);
  }
}
function configDefaults(userConfig) {
  const config = __spreadValues({}, userConfig || {});
  if (!config.projectRoot)
    config.projectRoot = ".";
  if (!config.src)
    config.src = "./src";
  if (!config.pages)
    config.pages = "./src/pages";
  if (!config.dist)
    config.dist = "./dist";
  if (!config.public)
    config.public = "./public";
  if (!config.devOptions)
    config.devOptions = {};
  if (!config.devOptions.port)
    config.devOptions.port = 3e3;
  if (!config.buildOptions)
    config.buildOptions = {};
  if (!config.markdownOptions)
    config.markdownOptions = {};
  if (typeof config.buildOptions.sitemap === "undefined")
    config.buildOptions.sitemap = true;
  return config;
}
function normalizeConfig(userConfig, root) {
  const config = __spreadValues({}, userConfig || {});
  const fileProtocolRoot = `file://${root}/`;
  config.projectRoot = new URL(config.projectRoot + "/", fileProtocolRoot);
  config.src = new URL(config.src + "/", fileProtocolRoot);
  config.pages = new URL(config.pages + "/", fileProtocolRoot);
  config.public = new URL(config.public + "/", fileProtocolRoot);
  return config;
}
async function loadConfig(rawRoot, configFileName = "astro.config.mjs") {
  const root = rawRoot ? path.resolve(rawRoot) : process.cwd();
  const astroConfigPath = new URL(`./${configFileName}`, `file://${root}/`);
  let config;
  if (existsSync(astroConfigPath)) {
    config = configDefaults((await import(astroConfigPath.href)).default);
  } else {
    config = configDefaults();
  }
  validateConfig(config);
  config = normalizeConfig(config, root);
  return config;
}

// src/config_manager.ts
var CONFIG_MODULE_BASE_NAME = "__astro_config.js";
var CONFIG_MODULE_URL = `/_astro_frontend/${CONFIG_MODULE_BASE_NAME}`;
var DEFAULT_RENDERERS = ["@astrojs/renderer-vue", "@astrojs/renderer-svelte", "@astrojs/renderer-react", "@astrojs/renderer-preact"];
var ConfigManager = class {
  constructor(astroConfig, resolvePackageUrl) {
    this.astroConfig = astroConfig;
    this.resolvePackageUrl = resolvePackageUrl;
    this.state = "initial";
    this.snowpackRuntime = null;
    this.configModuleId = null;
    this.version = 1;
    this.setRendererNames(this.astroConfig);
  }
  markDirty() {
    this.state = "dirty";
  }
  async update() {
    if (this.needsUpdate() && this.snowpackRuntime) {
      if (this.state === "dirty") {
        const version = this.version++;
        const astroConfig = await loadConfig(this.astroConfig.projectRoot.pathname, `astro.config.mjs?version=${version}`);
        this.setRendererNames(astroConfig);
      }
      await this.importModule(this.snowpackRuntime);
      this.state = "clean";
    }
  }
  isConfigModule(fileExt, filename) {
    return fileExt === ".js" && filename.endsWith(CONFIG_MODULE_BASE_NAME);
  }
  isAstroConfig(filename) {
    const {projectRoot} = this.astroConfig;
    return new URL("./astro.config.mjs", projectRoot).pathname === filename;
  }
  async buildRendererInstances() {
    const {projectRoot} = this.astroConfig;
    const rendererNames = this.rendererNames;
    const resolveDependency = (dep) => resolve.sync(dep, {basedir: fileURLToPath(projectRoot)});
    const rendererInstances = (await Promise.all(rendererNames.map(async (rendererName) => {
      let _options = null;
      if (Array.isArray(rendererName)) {
        _options = rendererName[1];
        rendererName = rendererName[0];
      }
      const entrypoint = pathToFileURL(resolveDependency(rendererName)).toString();
      const r = await import(entrypoint);
      return {
        raw: r.default,
        options: _options
      };
    }))).map(({raw, options}, i) => {
      const {name = rendererNames[i], client, server, snowpackPlugin: snowpackPluginName, snowpackPluginOptions} = raw;
      if (typeof client !== "string" && client != null) {
        throw new Error(`Expected "client" from ${name} to be a relative path to the client-side renderer!`);
      }
      if (typeof server !== "string") {
        throw new Error(`Expected "server" from ${name} to be a relative path to the server-side renderer!`);
      }
      let snowpackPlugin;
      if (typeof snowpackPluginName === "string") {
        if (snowpackPluginOptions) {
          snowpackPlugin = [resolveDependency(snowpackPluginName), snowpackPluginOptions];
        } else {
          snowpackPlugin = resolveDependency(snowpackPluginName);
        }
      } else if (snowpackPluginName) {
        throw new Error(`Expected the snowpackPlugin from ${name} to be a "string" but encountered "${typeof snowpackPluginName}"!`);
      }
      const polyfillsNormalized = (raw.polyfills || []).map((p) => p.startsWith(".") ? path2.join(name, p) : p);
      const hydrationPolyfillsNormalized = (raw.hydrationPolyfills || []).map((p) => p.startsWith(".") ? path2.join(name, p) : p);
      return {
        name,
        options,
        snowpackPlugin,
        client: raw.client ? path2.join(name, raw.client) : null,
        server: path2.join(name, raw.server),
        knownEntrypoints: raw.knownEntrypoints,
        external: raw.external,
        polyfills: polyfillsNormalized,
        hydrationPolyfills: hydrationPolyfillsNormalized
      };
    });
    return rendererInstances;
  }
  async buildSource(contents) {
    const renderers = await this.buildRendererInstances();
    const rendererServerPackages = renderers.map(({server}) => server);
    const rendererClientPackages = await Promise.all(renderers.filter(({client}) => client).map(({client}) => this.resolvePackageUrl(client)));
    const rendererPolyfills = await Promise.all(renderers.map(({polyfills}) => Promise.all(polyfills.map((src) => this.resolvePackageUrl(src)))));
    const rendererHydrationPolyfills = await Promise.all(renderers.map(({hydrationPolyfills}) => Promise.all(hydrationPolyfills.map((src) => this.resolvePackageUrl(src)))));
    const result = `${rendererServerPackages.map((pkg, i) => `import __renderer_${i} from "${pkg}";`).join("\n")}

import { setRenderers } from 'astro/dist/internal/__astro_component.js';

let rendererInstances = [${renderers.map((r, i) => `{
  source: ${rendererClientPackages[i] ? `"${rendererClientPackages[i]}"` : "null"},
  renderer: typeof __renderer_${i} === 'function' ? __renderer_${i}(${r.options ? JSON.stringify(r.options) : "null"}) : __renderer_${i},
  polyfills: ${JSON.stringify(rendererPolyfills[i])},
  hydrationPolyfills: ${JSON.stringify(rendererHydrationPolyfills[i])}
}`).join(", ")}];

${contents}
`;
    return result;
  }
  needsUpdate() {
    return this.state === "initial" || this.state === "dirty";
  }
  setRendererNames(astroConfig) {
    this.rendererNames = astroConfig.renderers || DEFAULT_RENDERERS;
  }
  async importModule(snowpackRuntime) {
    await snowpackRuntime.importModule(CONFIG_MODULE_URL);
  }
};
export {
  ConfigManager
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2NvbmZpZ19tYW5hZ2VyLnRzIiwgIi4uL3NyYy9jb25maWcudHMiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7OztBQ0ZBO0FBQ0E7QUFDQTtBQUdBLElBQU0sT0FBTyxDQUFDLFVBQXdCLE1BQU0sUUFBUSxTQUFTLFVBQVUsT0FBTztBQUc5RSx3QkFBd0IsUUFBbUI7QUFWM0M7QUFZRSxNQUFJLFdBQVcsVUFBYSxXQUFXO0FBQU0sVUFBTSxJQUFJLE1BQU07QUFDN0QsTUFBSSxPQUFPLFdBQVc7QUFBVSxVQUFNLElBQUksTUFBTSxzQ0FBc0MsT0FBTztBQUc3RixhQUFXLE9BQU8sQ0FBQyxlQUFlLFNBQVMsUUFBUSxXQUFXO0FBQzVELFFBQUksT0FBTyxTQUFTLFVBQWEsT0FBTyxTQUFTLFFBQVEsT0FBTyxPQUFPLFNBQVMsVUFBVTtBQUN4RixZQUFNLElBQUksTUFBTSxZQUFZLFFBQVEsS0FBSyxVQUFVLE9BQU87QUFBQSw4QkFBc0MsS0FBSyxPQUFPO0FBQUE7QUFBQTtBQUtoSCxhQUFXLE9BQU8sQ0FBQyxZQUFZO0FBQzdCLFFBQUksT0FBTyxTQUFTLFVBQWEsT0FBTyxTQUFTLFFBQVEsT0FBTyxPQUFPLFNBQVMsV0FBVztBQUN6RixZQUFNLElBQUksTUFBTSxZQUFZLFFBQVEsS0FBSyxVQUFVLE9BQU87QUFBQSwrQkFBdUMsS0FBSyxPQUFPO0FBQUE7QUFBQTtBQUtqSCxNQUFJLE9BQU8sY0FBYztBQUV2QixRQUFJLE9BQU8sYUFBYSxTQUFTLFFBQVc7QUFDMUMsVUFBSSxPQUFPLE9BQU8sYUFBYSxTQUFTO0FBQVUsY0FBTSxJQUFJLE1BQU07QUFDbEUsVUFBSTtBQUNGLFlBQUksSUFBSSxPQUFPLGFBQWE7QUFBQSxlQUNyQixLQUFQO0FBQ0EsY0FBTSxJQUFJLE1BQU07QUFBQTtBQUFBO0FBQUE7QUFNdEIsTUFBSSxPQUFPLGNBQU8sZUFBUCxtQkFBbUIsVUFBUyxVQUFVO0FB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
