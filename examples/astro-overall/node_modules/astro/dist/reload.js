// src/reload.ts
import {clearCache} from "snowpack";

// src/logger.ts
import "source-map-support/register.js";
import {bold, blue, red, grey, underline, yellow} from "kleur/colors";
import {Writable} from "stream";
import {format as utilFormat} from "util";
import stringWidth from "string-width";
var defaultLogDestination = new Writable({
  objectMode: true,
  write(event, _, callback) {
    let dest = process.stderr;
    if (levels[event.level] < levels["error"]) {
      dest = process.stdout;
    }
    let type = event.type;
    if (type !== null) {
      if (event.level === "info") {
        type = bold(blue(type));
      } else if (event.level === "warn") {
        type = bold(yellow(type));
      } else if (event.level === "error") {
        type = bold(red(type));
      }
      dest.write(`[${type}] `);
    }
    dest.write(utilFormat(...event.args));
    dest.write("\n");
    callback();
  }
});
var defaultLogOptions = {
  dest: defaultLogDestination,
  level: "info"
};
var levels = {
  debug: 20,
  info: 30,
  warn: 40,
  error: 50,
  silent: 90
};
function log(opts = defaultLogOptions, level, type, ...args) {
  const event = {
    type,
    level,
    args,
    message: ""
  };
  if (levels[opts.level] > levels[level]) {
    return;
  }
  opts.dest.write(event);
}
function debug(opts, type, ...messages) {
  return log(opts, "debug", type, ...messages);
}
function info(opts, type, ...messages) {
  return log(opts, "info", type, ...messages);
}
function warn(opts, type, ...messages) {
  return log(opts, "warn", type, ...messages);
}
function error(opts, type, ...messages) {
  return log(opts, "error", type, ...messages);
}
var logger = {
  debug: debug.bind(null, defaultLogOptions),
  info: info.bind(null, defaultLogOptions),
  warn: warn.bind(null, defaultLogOptions),
  error: error.bind(null, defaultLogOptions)
};
var defaultLogLevel;
if (process.argv.includes("--verbose")) {
  defaultLogLevel = "debug";
} else if (process.argv.includes("--silent")) {
  defaultLogLevel = "silent";
} else {
  defaultLogLevel = "info";
}

// src/reload.ts
var logging = {
  level: defaultLogLevel,
  dest: defaultLogDestination
};
async function reload() {
  try {
    info(logging, "reload", `Clearing the cache...`);
    await clearCache();
    return 0;
  } catch {
    return 1;
  }
}
export {
  reload
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3JlbG9hZC50cyIsICIuLi9zcmMvbG9nZ2VyLnRzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUNBOzs7QUNEQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBTU8sSUFBTSx3QkFBd0IsSUFBSSxTQUFTO0FBQUEsRUFDaEQsWUFBWTtBQUFBLEVBQ1osTUFBTSxPQUFtQixHQUFHLFVBQVU7QUFDcEMsUUFBSSxPQUFzQixRQUFRO0FBQ2xDLFFBQUksT0FBTyxNQUFNLFNBQVMsT0FBTyxVQUFVO0FBQ3pDLGFBQU8sUUFBUTtBQUFBO0FBRWpCLFFBQUksT0FBTyxNQUFNO0FBQ2pCLFFBQUksU0FBUyxNQUFNO0FBQ2pCLFVBQUksTUFBTSxVQUFVLFFBQVE7QUFDMUIsZUFBTyxLQUFLLEtBQUs7QUFBQSxpQkFDUixNQUFNLFVBQVUsUUFBUTtBQUNqQyxlQUFPLEtBQUssT0FBTztBQUFBLGlCQUNWLE1BQU0sVUFBVSxTQUFTO0FBQ2xDLGVBQU8sS0FBSyxJQUFJO0FBQUE7QUFHbEIsV0FBSyxNQUFNLElBQUk7QUFBQTtBQUdqQixTQUFLLE1BQU0sV0FBVyxHQUFHLE1BQU07QUFDL0IsU0FBSyxNQUFNO0FBRVg7QUFBQTtBQUFBO0FBZ0JHLElBQU0sb0JBQWdDO0FBQUEsRUFDM0MsTUFBTTtBQUFBLEVBQ04sT0FBTztBQUFBO0FBVVQsSUFBTSxTQUFzQztBQUFBLEVBQzFDLE9BQU87QUFBQSxFQUNQLE1BQU07QUFBQSxFQUNOLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLFFBQVE7QUFBQTtBQUlILGFBQWEsT0FBbUIsbUJBQW1CLE9BQW9CLFNBQXdCLE1BQWtCO0FBQ3RILFFBQU0sUUFBb0I7QUFBQSxJQUN4QjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQSxTQUFTO0FBQUE7QUFJWCxNQUFJLE9BQU8sS0FBSyxTQUFTLE9BQU8sUUFBUTtBQUN0QztBQUFBO0FBR0YsT0FBSyxLQUFLLE1BQU07QUFBQTtBQUlYLGVBQWUsTUFBa0IsU0FBd0IsVUFBc0I7QUFDcEYsU0FBTyxJQUFJLE1BQU0sU0FBUyxNQUFNLEdBQUc7QUFBQTtBQUk5QixjQUFjLE1BQWtCLFNBQXdCLFVBQXNCO0FBQ25GLFNBQU8sSUFBSSxNQUFNLFFBQVEsTUFBTSxHQUFHO0FBQUE7QUFJN0IsY0FBYyxNQUFrQixTQUF3QixVQUFzQjtBQUNuRixTQUFPLElBQUksTUFBTSxRQUFRLE1BQU0sR0FBRztBQUFBO0FBSTdCLGVBQWUsTUFBa0IsU0FBd0IsVUFBc0I7QUFDcEYsU0FBTyxJQUFJLE1BQU0sU0FBUyxNQUFNLEdBQUc7QUFBQTtBQXlDOUIsSUFBTSxTQUFTO0FBQUEsRUFDcEIsT0FBTyxNQUFNLEtBQUssTUFBTTtBQUFBLEVBQ3hCLE1BQU0sS0FBSyxLQUFLLE1BQU07QUFBQSxFQUN0QixNQUFNLEtBQUssS0FBSyxNQUFNO0FBQUEsRUFDdEIsT0FBTyxNQUFNLEtBQUssTUFBTTtBQUFBO0FBWW5CLElBQUk7QUFDWCxJQUFJLFFBQVEsS0FBSyxTQUFTLGNBQWM7QUFDdEMsb0JBQWtCO0FBQUEsV0FDVCxRQUFRLEtBQUssU0FBUyxhQUFhO0FBQzVDLG9CQUFrQjtBQUFBLE9BQ2I7QUFDTCxvQkFBa0I7QUFBQTs7O0FEbktwQixJQUFNLFVBQXNCO0FBQUEsRUFDMUIsT0FBTztBQUFBLEVBQ1AsTUFBTTtBQUFBO0FBR1Isd0JBQStCO0FBQzdCLE1BQUk7QUFDRixTQUFLLFNBQVMsVUFBVTtBQUN4QixVQUFNO0FBQ04sV0FBTztBQUFBLFVBQ1A7QUFDQSxXQUFPO0FBQUE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
