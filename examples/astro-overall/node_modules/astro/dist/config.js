var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/config.ts
import "source-map-support/register.js";
import path from "path";
import {existsSync} from "fs";
var type = (thing) => Array.isArray(thing) ? "Array" : typeof thing;
function validateConfig(config) {
  var _a, _b, _c, _d, _e;
  if (config === void 0 || config === null)
    throw new Error(`[config] Config empty!`);
  if (typeof config !== "object")
    throw new Error(`[config] Expected object, received ${typeof config}`);
  for (const key of ["projectRoot", "pages", "dist", "public"]) {
    if (config[key] !== void 0 && config[key] !== null && typeof config[key] !== "string") {
      throw new Error(`[config] ${key}: ${JSON.stringify(config[key])}
  Expected string, received ${type(config[key])}.`);
    }
  }
  for (const key of ["sitemap"]) {
    if (config[key] !== void 0 && config[key] !== null && typeof config[key] !== "boolean") {
      throw new Error(`[config] ${key}: ${JSON.stringify(config[key])}
  Expected boolean, received ${type(config[key])}.`);
    }
  }
  if (config.buildOptions) {
    if (config.buildOptions.site !== void 0) {
      if (typeof config.buildOptions.site !== "string")
        throw new Error(`[config] buildOptions.site is not a string`);
      try {
        new URL(config.buildOptions.site);
      } catch (err) {
        throw new Error("[config] buildOptions.site must be a valid URL");
      }
    }
  }
  if (typeof ((_a = config.devOptions) == null ? void 0 : _a.port) !== "number") {
    throw new Error(`[config] devOptions.port: Expected number, received ${type((_b = config.devOptions) == null ? void 0 : _b.port)}`);
  }
  if (((_c = config.devOptions) == null ? void 0 : _c.tailwindConfig) !== void 0 && typeof ((_d = config.devOptions) == null ? void 0 : _d.tailwindConfig) !== "string") {
    throw new Error(`[config] devOptions.tailwindConfig: Expected string, received ${type((_e = config.devOptions) == null ? void 0 : _e.tailwindConfig)}`);
  }
}
function configDefaults(userConfig) {
  const config = __spreadValues({}, userConfig || {});
  if (!config.projectRoot)
    config.projectRoot = ".";
  if (!config.src)
    config.src = "./src";
  if (!config.pages)
    config.pages = "./src/pages";
  if (!config.dist)
    config.dist = "./dist";
  if (!config.public)
    config.public = "./public";
  if (!config.devOptions)
    config.devOptions = {};
  if (!config.devOptions.port)
    config.devOptions.port = 3e3;
  if (!config.buildOptions)
    config.buildOptions = {};
  if (!config.markdownOptions)
    config.markdownOptions = {};
  if (typeof config.buildOptions.sitemap === "undefined")
    config.buildOptions.sitemap = true;
  return config;
}
function normalizeConfig(userConfig, root) {
  const config = __spreadValues({}, userConfig || {});
  const fileProtocolRoot = `file://${root}/`;
  config.projectRoot = new URL(config.projectRoot + "/", fileProtocolRoot);
  config.src = new URL(config.src + "/", fileProtocolRoot);
  config.pages = new URL(config.pages + "/", fileProtocolRoot);
  config.public = new URL(config.public + "/", fileProtocolRoot);
  return config;
}
async function loadConfig(rawRoot, configFileName = "astro.config.mjs") {
  const root = rawRoot ? path.resolve(rawRoot) : process.cwd();
  const astroConfigPath = new URL(`./${configFileName}`, `file://${root}/`);
  let config;
  if (existsSync(astroConfigPath)) {
    config = configDefaults((await import(astroConfigPath.href)).default);
  } else {
    config = configDefaults();
  }
  validateConfig(config);
  config = normalizeConfig(config, root);
  return config;
}
export {
  loadConfig
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2NvbmZpZy50cyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUdBLElBQU0sT0FBTyxDQUFDLFVBQXdCLE1BQU0sUUFBUSxTQUFTLFVBQVUsT0FBTztBQUc5RSx3QkFBd0IsUUFBbUI7QUFWM0M7QUFZRSxNQUFJLFdBQVcsVUFBYSxXQUFXO0FBQU0sVUFBTSxJQUFJLE1BQU07QUFDN0QsTUFBSSxPQUFPLFdBQVc7QUFBVSxVQUFNLElBQUksTUFBTSxzQ0FBc0MsT0FBTztBQUc3RixhQUFXLE9BQU8sQ0FBQyxlQUFlLFNBQVMsUUFBUSxXQUFXO0FBQzVELFFBQUksT0FBTyxTQUFTLFVBQWEsT0FBTyxTQUFTLFFBQVEsT0FBTyxPQUFPLFNBQVMsVUFBVTtBQUN4RixZQUFNLElBQUksTUFBTSxZQUFZLFFBQVEsS0FBSyxVQUFVLE9BQU87QUFBQSw4QkFBc0MsS0FBSyxPQUFPO0FBQUE7QUFBQTtBQUtoSCxhQUFXLE9BQU8sQ0FBQyxZQUFZO0FBQzdCLFFBQUksT0FBTyxTQUFTLFVBQWEsT0FBTyxTQUFTLFFBQVEsT0FBTyxPQUFPLFNBQVMsV0FBVztBQUN6RixZQUFNLElBQUksTUFBTSxZQUFZLFFBQVEsS0FBSyxVQUFVLE9BQU87QUFBQSwrQkFBdUMsS0FBSyxPQUFPO0FBQUE7QUFBQTtBQUtqSCxNQUFJLE9BQU8sY0FBYztBQUV2QixRQUFJLE9BQU8sYUFBYSxTQUFTLFFBQVc7QUFDMUMsVUFBSSxPQUFPLE9BQU8sYUFBYSxTQUFTO0FBQVUsY0FBTSxJQUFJLE1BQU07QUFDbEUsVUFBSTtBQUNGLFlBQUksSUFBSSxPQUFPLGFBQWE7QUFBQSxlQUNyQixLQUFQO0FBQ0EsY0FBTSxJQUFJLE1BQU07QUFBQTtBQUFBO0FBQUE7QUFNdEIsTUFBSSxPQUFPLGNBQU8sZUFBUCxtQkFBbUIsVUFBUyxVQUFVO0FBQy9DLFVBQU0sSUFBSSxNQUFNLHVEQUF1RCxLQUFLLGFBQU8sZUFBUCxtQkFBbUI7QUFBQTtBQUVqRyxNQUFJLGNBQU8sZUFBUCxtQkFBbUIsb0JBQW1CLFVBQWEsT0FBTyxjQUFPLGVBQVAsbUJBQW1CLG9CQUFtQixVQUFVO0FBQzVHLFVBQU0sSUFBSSxNQUFNLGlFQUFpRSxLQUFLLGFBQU8sZUFBUCxtQkFBbUI7QUFBQTtBQUFBO0FBSzdHLHdCQUF3QixZQUF1QjtBQUM3QyxRQUFNLFNBQWMsbUJBQU0sY0FBYztBQUV4QyxNQUFJLENBQUMsT0FBTztBQUFhLFdBQU8sY0FBYztBQUM5QyxNQUFJLENBQUMsT0FBTztBQUFLLFdBQU8sTUFBTTtBQUM5QixNQUFJLENBQUMsT0FBTztBQUFPLFdBQU8sUUFBUTtBQUNsQyxNQUFJLENBQUMsT0FBTztBQUFNLFdBQU8sT0FBTztBQUNoQyxNQUFJLENBQUMsT0FBTztBQUFRLFdBQU8sU0FBUztBQUNwQyxNQUFJLENBQUMsT0FBTztBQUFZLFdBQU8sYUFBYTtBQUM1QyxNQUFJLENBQUMsT0FBTyxXQUFXO0FBQU0sV0FBTyxXQUFXLE9BQU87QUFDdEQsTUFBSSxDQUFDLE9BQU87QUFBYyxXQUFPLGVBQWU7QUFDaEQsTUFBSSxDQUFDLE9BQU87QUFBaUIsV0FBTyxrQkFBa0I7QUFDdEQsTUFBSSxPQUFPLE9BQU8sYUFBYSxZQUFZO0FBQWEsV0FBTyxhQUFhLFVBQVU7QUFFdEYsU0FBTztBQUFBO0FBSVQseUJBQXlCLFlBQWlCLE1BQTJCO0FBQ25FLFFBQU0sU0FBYyxtQkFBTSxjQUFjO0FBRXhDLFFBQU0sbUJBQW1CLFVBQVU7QUFDbkMsU0FBTyxjQUFjLElBQUksSUFBSSxPQUFPLGNBQWMsS0FBSztBQUN2RCxTQUFPLE1BQU0sSUFBSSxJQUFJLE9BQU8sTUFBTSxLQUFLO0FBQ3ZDLFNBQU8sUUFBUSxJQUFJLElBQUksT0FBTyxRQUFRLEtBQUs7QUFDM0MsU0FBTyxTQUFTLElBQUksSUFBSSxPQUFPLFNBQVMsS0FBSztBQUU3QyxTQUFPO0FBQUE7QUFJVCwwQkFBaUMsU0FBNkIsaUJBQWlCLG9CQUEwQztBQUN2SCxRQUFNLE9BQU8sVUFBVSxLQUFLLFFBQVEsV0FBVyxRQUFRO0FBQ3ZELFFBQU0sa0JBQWtCLElBQUksSUFBSSxLQUFLLGtCQUFrQixVQUFVO0FBR2pFLE1BQUk7QUFDSixNQUFJLFdBQVcsa0JBQWtCO0FBQy9CLGFBQVMsZUFBZ0IsT0FBTSxPQUFPLGdCQUFnQixPQUFPO0FBQUEsU0FDeEQ7QUFDTCxhQUFTO0FBQUE7QUFJWCxpQkFBZTtBQUdmLFdBQVMsZ0JBQWdCLFFBQVE7QUFFakMsU0FBTztBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
