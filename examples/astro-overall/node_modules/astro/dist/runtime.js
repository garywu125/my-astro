var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/runtime.ts
import "source-map-support/register.js";
import resolve2 from "resolve";
import {existsSync as existsSync3, promises as fs2} from "fs";
import {fileURLToPath as fileURLToPath3} from "url";
import {posix as path5} from "path";
import {performance as performance2} from "perf_hooks";
import {
  loadConfiguration,
  logger as snowpackLogger,
  NotFoundError,
  startServer as startSnowpackServer
} from "snowpack";
import {CompileError} from "@astrojs/parser";

// src/build/util.ts
import {performance} from "perf_hooks";
import fs from "fs";
import path from "path";
import {URL as URL2} from "url";
function canonicalURL(url, base) {
  let pathname = url.replace(/\/index.html$/, "");
  pathname = pathname.replace(/\/1\/?$/, "");
  if (!path.extname(pathname))
    pathname = pathname.replace(/(\/+)?$/, "/");
  pathname = pathname.replace(/\/+/g, "/");
  return new URL2(pathname, base);
}
function getSrcPath(distURL, {astroConfig}) {
  if (distURL.startsWith("/_astro/")) {
    return new URL2("." + distURL.replace(/^\/_astro\//, ""), astroConfig.projectRoot);
  } else if (distURL === "/index.html") {
    return new URL2("./index.astro", astroConfig.pages);
  }
  const possibleURLs = [
    new URL2("." + distURL, astroConfig.public),
    new URL2("." + distURL.replace(/([^\/])+\/d+\/index.html/, "$$1.astro"), astroConfig.pages),
    new URL2("." + distURL.replace(/\/index\.html$/, ".astro"), astroConfig.pages)
  ];
  for (const possibleURL of possibleURLs) {
    if (fs.existsSync(possibleURL))
      return possibleURL;
  }
  return new URL2("." + distURL, astroConfig.projectRoot);
}
function stopTimer(start) {
  const diff = performance.now() - start;
  return diff < 750 ? `${Math.round(diff)}ms` : `${(diff / 1e3).toFixed(1)}s`;
}

// src/logger.ts
import "source-map-support/register.js";
import {bold, blue, red, grey, underline, yellow} from "kleur/colors";
import {Writable} from "stream";
import {format as utilFormat} from "util";
import stringWidth from "string-width";
var defaultLogDestination = new Writable({
  objectMode: true,
  write(event, _, callback) {
    let dest = process.stderr;
    if (levels[event.level] < levels["error"]) {
      dest = process.stdout;
    }
    let type2 = event.type;
    if (type2 !== null) {
      if (event.level === "info") {
        type2 = bold(blue(type2));
      } else if (event.level === "warn") {
        type2 = bold(yellow(type2));
      } else if (event.level === "error") {
        type2 = bold(red(type2));
      }
      dest.write(`[${type2}] `);
    }
    dest.write(utilFormat(...event.args));
    dest.write("\n");
    callback();
  }
});
var defaultLogOptions = {
  dest: defaultLogDestination,
  level: "info"
};
var levels = {
  debug: 20,
  info: 30,
  warn: 40,
  error: 50,
  silent: 90
};
function log(opts = defaultLogOptions, level, type2, ...args) {
  const event = {
    type: type2,
    level,
    args,
    message: ""
  };
  if (levels[opts.level] > levels[level]) {
    return;
  }
  opts.dest.write(event);
}
function debug(opts, type2, ...messages) {
  return log(opts, "debug", type2, ...messages);
}
function info(opts, type2, ...messages) {
  return log(opts, "info", type2, ...messages);
}
function warn(opts, type2, ...messages) {
  return log(opts, "warn", type2, ...messages);
}
function error(opts, type2, ...messages) {
  return log(opts, "error", type2, ...messages);
}
var logger = {
  debug: debug.bind(null, defaultLogOptions),
  info: info.bind(null, defaultLogOptions),
  warn: warn.bind(null, defaultLogOptions),
  error: error.bind(null, defaultLogOptions)
};
var defaultLogLevel;
if (process.argv.includes("--verbose")) {
  defaultLogLevel = "debug";
} else if (process.argv.includes("--silent")) {
  defaultLogLevel = "silent";
} else {
  defaultLogLevel = "info";
}

// src/snowpack-logger.ts
function configureSnowpackLogger(logger2) {
  if (defaultLogLevel === "debug") {
    logger2.level = "debug";
  } else if (defaultLogLevel === "silent") {
    logger2.level = "silent";
  }
}

// src/search.ts
import "source-map-support/register.js";
import {existsSync} from "fs";
import path2 from "path";
import {fileURLToPath} from "url";
import glob from "tiny-glob/sync.js";
function findAnyPage(candidates, astroConfig) {
  for (let candidate of candidates) {
    const url = new URL(`./${candidate}`, astroConfig.pages);
    if (existsSync(url)) {
      const pagesPath = astroConfig.pages.pathname.replace(astroConfig.projectRoot.pathname, "");
      return {
        fileURL: url,
        snowpackURL: `/_astro/${pagesPath}${candidate}.js`
      };
    }
  }
  return false;
}
function searchForPage(url, astroConfig) {
  const reqPath = decodeURI(url.pathname);
  const base = reqPath.substr(1);
  if (reqPath.endsWith("/")) {
    const candidates2 = [`${base}index.astro`, `${base}index.md`];
    const location2 = findAnyPage(candidates2, astroConfig);
    if (location2) {
      return {
        statusCode: 200,
        location: location2,
        pathname: reqPath
      };
    }
  } else {
    const candidates2 = [`${base}.astro`, `${base}.md`];
    let location2 = findAnyPage(candidates2, astroConfig);
    if (location2) {
      return {
        statusCode: 200,
        location: location2,
        pathname: reqPath
      };
    }
  }
  const candidates = [`${base}/index.astro`, `${base}/index.md`];
  const location = findAnyPage(candidates, astroConfig);
  if (location) {
    return {
      statusCode: 301,
      location: null,
      pathname: reqPath + "/"
    };
  }
  const hasExt = !!path2.extname(reqPath);
  if (!location && !hasExt) {
    const collection = loadCollection(reqPath, astroConfig);
    if (collection) {
      return {
        statusCode: 200,
        location: collection.location,
        pathname: reqPath,
        currentPage: collection.currentPage || 1
      };
    }
  }
  if (reqPath === "/500") {
    return {
      statusCode: 200,
      location: {
        fileURL: new URL("./frontend/500.astro", import.meta.url),
        snowpackURL: `/_astro_frontend/500.astro.js`
      },
      pathname: reqPath
    };
  }
  return {
    statusCode: 404
  };
}
function loadCollection(url, astroConfig) {
  const pages = glob("**/$*.astro", {cwd: fileURLToPath(astroConfig.pages), filesOnly: true});
  for (const pageURL of pages) {
    const reqURL = new RegExp("^/" + pageURL.replace(/\$([^/]+)\.astro/, "$1") + "(?:/(.*)|/?$)");
    const match = url.match(reqURL);
    if (match) {
      let currentPage;
      if (match[1]) {
        const segments = match[1].split("/").filter((s) => !!s);
        if (segments.length) {
          const last = segments.pop();
          if (parseInt(last, 10)) {
            currentPage = parseInt(last, 10);
          }
        }
      }
      const pagesPath = astroConfig.pages.pathname.replace(astroConfig.projectRoot.pathname, "");
      return {
        location: {
          fileURL: new URL(`./${pageURL}`, astroConfig.pages),
          snowpackURL: `/_astro/${pagesPath}${pageURL}.js`
        },
        currentPage
      };
    }
  }
}

// src/external.ts
import {createRequire} from "module";

// src/node_builtins.ts
import {builtinModules} from "module";
var nodeBuiltinsSet = new Set(builtinModules);
var nodeBuiltinsMap = new Map(builtinModules.map((bareName) => [bareName, "node:" + bareName]));

// src/external.ts
var require2 = createRequire(import.meta.url);
var pkg = require2("../package.json");
var allowList = new Set(["astring", "@astrojs/prism", "estree-util-value-to-estree", "prismjs", "shorthash"]);
var isAstroRenderer = (name) => {
  return name.startsWith(`@astrojs/renderer-`);
};
var denyList = ["prismjs/components/index.js", "@vue/server-renderer", "@astrojs/markdown-support", "node:fs/promises", ...nodeBuiltinsMap.values()];
var external_default = Object.keys(pkg.dependencies).filter((name) => {
  if (allowList.has(name))
    return false;
  if (isAstroRenderer(name))
    return false;
  return true;
}).concat(denyList).sort();

// src/config_manager.ts
import {posix as path4} from "path";
import {fileURLToPath as fileURLToPath2, pathToFileURL} from "url";
import resolve from "resolve";

// src/config.ts
import "source-map-support/register.js";
import path3 from "path";
import {existsSync as existsSync2} from "fs";
var type = (thing) => Array.isArray(thing) ? "Array" : typeof thing;
function validateConfig(config) {
  var _a, _b, _c, _d, _e;
  if (config === void 0 || config === null)
    throw new Error(`[config] Config empty!`);
  if (typeof config !== "object")
    throw new Error(`[config] Expected object, received ${typeof config}`);
  for (const key of ["projectRoot", "pages", "dist", "public"]) {
    if (config[key] !== void 0 && config[key] !== null && typeof config[key] !== "string") {
      throw new Error(`[config] ${key}: ${JSON.stringify(config[key])}
  Expected string, received ${type(config[key])}.`);
    }
  }
  for (const key of ["sitemap"]) {
    if (config[key] !== void 0 && config[key] !== null && typeof config[key] !== "boolean") {
      throw new Error(`[config] ${key}: ${JSON.stringify(config[key])}
  Expected boolean, received ${type(config[key])}.`);
    }
  }
  if (config.buildOptions) {
    if (config.buildOptions.site !== void 0) {
      if (typeof config.buildOptions.site !== "string")
        throw new Error(`[config] buildOptions.site is not a string`);
      try {
        new URL(config.buildOptions.site);
      } catch (err) {
        throw new Error("[config] buildOptions.site must be a valid URL");
      }
    }
  }
  if (typeof ((_a = config.devOptions) == null ? void 0 : _a.port) !== "number") {
    throw new Error(`[config] devOptions.port: Expected number, received ${type((_b = config.devOptions) == null ? void 0 : _b.port)}`);
  }
  if (((_c = config.devOptions) == null ? void 0 : _c.tailwindConfig) !== void 0 && typeof ((_d = config.devOptions) == null ? void 0 : _d.tailwindConfig) !== "string") {
    throw new Error(`[config] devOptions.tailwindConfig: Expected string, received ${type((_e = config.devOptions) == null ? void 0 : _e.tailwindConfig)}`);
  }
}
function configDefaults(userConfig) {
  const config = __spreadValues({}, userConfig || {});
  if (!config.projectRoot)
    config.projectRoot = ".";
  if (!config.src)
    config.src = "./src";
  if (!config.pages)
    config.pages = "./src/pages";
  if (!config.dist)
    config.dist = "./dist";
  if (!config.public)
    config.public = "./public";
  if (!config.devOptions)
    config.devOptions = {};
  if (!config.devOptions.port)
    config.devOptions.port = 3e3;
  if (!config.buildOptions)
    config.buildOptions = {};
  if (!config.markdownOptions)
    config.markdownOptions = {};
  if (typeof config.buildOptions.sitemap === "undefined")
    config.buildOptions.sitemap = true;
  return config;
}
function normalizeConfig(userConfig, root) {
  const config = __spreadValues({}, userConfig || {});
  const fileProtocolRoot = `file://${root}/`;
  config.projectRoot = new URL(config.projectRoot + "/", fileProtocolRoot);
  config.src = new URL(config.src + "/", fileProtocolRoot);
  config.pages = new URL(config.pages + "/", fileProtocolRoot);
  config.public = new URL(config.public + "/", fileProtocolRoot);
  return config;
}
async function loadConfig(rawRoot, configFileName = "astro.config.mjs") {
  const root = rawRoot ? path3.resolve(rawRoot) : process.cwd();
  const astroConfigPath = new URL(`./${configFileName}`, `file://${root}/`);
  let config;
  if (existsSync2(astroConfigPath)) {
    config = configDefaults((await import(astroConfigPath.href)).default);
  } else {
    config = configDefaults();
  }
  validateConfig(config);
  config = normalizeConfig(config, root);
  return config;
}

// src/config_manager.ts
var CONFIG_MODULE_BASE_NAME = "__astro_config.js";
var CONFIG_MODULE_URL = `/_astro_frontend/${CONFIG_MODULE_BASE_NAME}`;
var DEFAULT_RENDERERS = ["@astrojs/renderer-vue", "@astrojs/renderer-svelte", "@astrojs/renderer-react", "@astrojs/renderer-preact"];
var ConfigManager = class {
  constructor(astroConfig, resolvePackageUrl) {
    this.astroConfig = astroConfig;
    this.resolvePackageUrl = resolvePackageUrl;
    this.state = "initial";
    this.snowpackRuntime = null;
    this.configModuleId = null;
    this.version = 1;
    this.setRendererNames(this.astroConfig);
  }
  markDirty() {
    this.state = "dirty";
  }
  async update() {
    if (this.needsUpdate() && this.snowpackRuntime) {
      if (this.state === "dirty") {
        const version = this.version++;
        const astroConfig = await loadConfig(this.astroConfig.projectRoot.pathname, `astro.config.mjs?version=${version}`);
        this.setRendererNames(astroConfig);
      }
      await this.importModule(this.snowpackRuntime);
      this.state = "clean";
    }
  }
  isConfigModule(fileExt, filename) {
    return fileExt === ".js" && filename.endsWith(CONFIG_MODULE_BASE_NAME);
  }
  isAstroConfig(filename) {
    const {projectRoot} = this.astroConfig;
    return new URL("./astro.config.mjs", projectRoot).pathname === filename;
  }
  async buildRendererInstances() {
    const {projectRoot} = this.astroConfig;
    const rendererNames = this.rendererNames;
    const resolveDependency = (dep) => resolve.sync(dep, {basedir: fileURLToPath2(projectRoot)});
    const rendererInstances = (await Promise.all(rendererNames.map(async (rendererName) => {
      let _options = null;
      if (Array.isArray(rendererName)) {
        _options = rendererName[1];
        rendererName = rendererName[0];
      }
      const entrypoint = pathToFileURL(resolveDependency(rendererName)).toString();
      const r = await import(entrypoint);
      return {
        raw: r.default,
        options: _options
      };
    }))).map(({raw, options}, i) => {
      const {name = rendererNames[i], client, server, snowpackPlugin: snowpackPluginName, snowpackPluginOptions} = raw;
      if (typeof client !== "string" && client != null) {
        throw new Error(`Expected "client" from ${name} to be a relative path to the client-side renderer!`);
      }
      if (typeof server !== "string") {
        throw new Error(`Expected "server" from ${name} to be a relative path to the server-side renderer!`);
      }
      let snowpackPlugin;
      if (typeof snowpackPluginName === "string") {
        if (snowpackPluginOptions) {
          snowpackPlugin = [resolveDependency(snowpackPluginName), snowpackPluginOptions];
        } else {
          snowpackPlugin = resolveDependency(snowpackPluginName);
        }
      } else if (snowpackPluginName) {
        throw new Error(`Expected the snowpackPlugin from ${name} to be a "string" but encountered "${typeof snowpackPluginName}"!`);
      }
      const polyfillsNormalized = (raw.polyfills || []).map((p) => p.startsWith(".") ? path4.join(name, p) : p);
      const hydrationPolyfillsNormalized = (raw.hydrationPolyfills || []).map((p) => p.startsWith(".") ? path4.join(name, p) : p);
      return {
        name,
        options,
        snowpackPlugin,
        client: raw.client ? path4.join(name, raw.client) : null,
        server: path4.join(name, raw.server),
        knownEntrypoints: raw.knownEntrypoints,
        external: raw.external,
        polyfills: polyfillsNormalized,
        hydrationPolyfills: hydrationPolyfillsNormalized
      };
    });
    return rendererInstances;
  }
  async buildSource(contents) {
    const renderers = await this.buildRendererInstances();
    const rendererServerPackages = renderers.map(({server}) => server);
    const rendererClientPackages = await Promise.all(renderers.filter(({client}) => client).map(({client}) => this.resolvePackageUrl(client)));
    const rendererPolyfills = await Promise.all(renderers.map(({polyfills}) => Promise.all(polyfills.map((src) => this.resolvePackageUrl(src)))));
    const rendererHydrationPolyfills = await Promise.all(renderers.map(({hydrationPolyfills}) => Promise.all(hydrationPolyfills.map((src) => this.resolvePackageUrl(src)))));
    const result = `${rendererServerPackages.map((pkg2, i) => `import __renderer_${i} from "${pkg2}";`).join("\n")}

import { setRenderers } from 'astro/dist/internal/__astro_component.js';

let rendererInstances = [${renderers.map((r, i) => `{
  source: ${rendererClientPackages[i] ? `"${rendererClientPackages[i]}"` : "null"},
  renderer: typeof __renderer_${i} === 'function' ? __renderer_${i}(${r.options ? JSON.stringify(r.options) : "null"}) : __renderer_${i},
  polyfills: ${JSON.stringify(rendererPolyfills[i])},
  hydrationPolyfills: ${JSON.stringify(rendererHydrationPolyfills[i])}
}`).join(", ")}];

${contents}
`;
    return result;
  }
  needsUpdate() {
    return this.state === "initial" || this.state === "dirty";
  }
  setRendererNames(astroConfig) {
    this.rendererNames = astroConfig.renderers || DEFAULT_RENDERERS;
  }
  async importModule(snowpackRuntime) {
    await snowpackRuntime.importModule(CONFIG_MODULE_URL);
  }
};

// src/runtime.ts
configureSnowpackLogger(snowpackLogger);
async function load(config, rawPathname) {
  const {logging, snowpackRuntime, snowpack, configManager} = config;
  const {buildOptions, devOptions} = config.astroConfig;
  let origin = buildOptions.site ? new URL(buildOptions.site).origin : `http://localhost:${devOptions.port}`;
  const fullurl = new URL(rawPathname || "/", origin);
  const reqPath = decodeURI(fullurl.pathname);
  info(logging, "access", reqPath);
  const searchResult = searchForPage(fullurl, config.astroConfig);
  if (searchResult.statusCode === 404) {
    try {
      const result = await snowpack.loadUrl(reqPath);
      if (!result)
        throw new Error(`Unable to load ${reqPath}`);
      return __spreadValues({
        statusCode: 200
      }, result);
    } catch (err) {
      if (err.failed) {
        return {statusCode: 500, type: "unknown", error: err};
      }
      return {statusCode: 404, error: err};
    }
  }
  if (searchResult.statusCode === 301) {
    return {statusCode: 301, location: searchResult.pathname};
  }
  const snowpackURL = searchResult.location.snowpackURL;
  let rss = {};
  try {
    if (configManager.needsUpdate()) {
      await configManager.update();
    }
    const mod = await snowpackRuntime.importModule(snowpackURL);
    debug(logging, "resolve", `${reqPath} -> ${snowpackURL}`);
    let collection = {};
    let additionalURLs = new Set();
    if (mod.exports.createCollection) {
      const createCollection = await mod.exports.createCollection();
      const VALID_KEYS = new Set(["data", "routes", "permalink", "pageSize", "rss"]);
      for (const key of Object.keys(createCollection)) {
        if (!VALID_KEYS.has(key)) {
          throw new Error(`[createCollection] unknown option: "${key}". Expected one of ${[...VALID_KEYS].join(", ")}.`);
        }
      }
      let {data: loadData, routes, permalink, pageSize, rss: createRSS} = createCollection;
      if (!loadData)
        throw new Error(`[createCollection] must return \`data()\` function to create a collection.`);
      if (!pageSize)
        pageSize = 25;
      let currentParams = {};
      if (routes || permalink) {
        if (!routes)
          throw new Error("[createCollection] `permalink` requires `routes` as well.");
        if (!permalink)
          throw new Error("[createCollection] `routes` requires `permalink` as well.");
        let requestedParams = routes.find((p) => {
          const baseURL = permalink({params: p});
          additionalURLs.add(baseURL);
          return baseURL === reqPath || `${baseURL}/${searchResult.currentPage || 1}` === reqPath;
        });
        if (requestedParams) {
          currentParams = requestedParams;
          collection.params = requestedParams;
        }
      }
      let data = await loadData({params: currentParams});
      if (!data)
        throw new Error(`[createCollection] \`data()\` returned nothing (empty data)"`);
      if (!Array.isArray(data))
        data = [data];
      if (createRSS) {
        rss = __spreadProps(__spreadValues({}, createRSS), {
          data: [...data]
        });
      }
      collection.start = 0;
      collection.end = data.length - 1;
      collection.total = data.length;
      collection.page = {current: 1, size: pageSize, last: 1};
      collection.url = {current: reqPath};
      if (searchResult.currentPage) {
        const start = pageSize === Infinity ? 0 : (searchResult.currentPage - 1) * pageSize;
        const end = Math.min(start + pageSize, data.length);
        collection.start = start;
        collection.end = end - 1;
        collection.page.current = searchResult.currentPage;
        collection.page.last = Math.ceil(data.length / pageSize);
        if (end < data.length) {
          collection.url.next = collection.url.current.replace(/(\/\d+)?$/, `/${searchResult.currentPage + 1}`);
        }
        if (searchResult.currentPage > 1) {
          collection.url.prev = collection.url.current.replace(/\d+$/, `${searchResult.currentPage - 1 || 1}`).replace(/\/1$/, "");
        }
        for (let n = 1; n <= collection.page.last; n++) {
          if (additionalURLs.size) {
            additionalURLs.forEach((url) => {
              additionalURLs.add(url.replace(/(\/\d+)?$/, `/${n}`));
            });
          } else {
            additionalURLs.add(reqPath.replace(/(\/\d+)?$/, `/${n}`));
          }
        }
        data = data.slice(start, end);
      } else if (createCollection.pageSize) {
        return {
          statusCode: 301,
          location: reqPath + "/1",
          collectionInfo: {
            additionalURLs,
            rss: rss.data ? rss : void 0
          }
        };
      }
      if (!data.length) {
        return {
          statusCode: 404,
          error: new Error("Not Found"),
          collectionInfo: {
            additionalURLs,
            rss: rss.data ? rss : void 0
          }
        };
      }
      collection.data = data;
    }
    const requestURL = new URL(fullurl.toString());
    if (reqPath !== "/500") {
      requestURL.search = "";
    }
    let html = await mod.exports.__renderPage({
      request: {
        url: requestURL,
        canonicalURL: canonicalURL(requestURL.pathname, requestURL.origin)
      },
      children: [],
      props: Object.keys(collection).length > 0 ? {collection} : {},
      css: Array.isArray(mod.css) ? mod.css : typeof mod.css === "string" ? [mod.css] : []
    });
    return {
      statusCode: 200,
      contentType: "text/html; charset=utf-8",
      contents: html,
      collectionInfo: {
        additionalURLs,
        rss: rss.data ? rss : void 0
      }
    };
  } catch (err) {
    if (err.code === "parse-error" || err instanceof SyntaxError) {
      return {
        statusCode: 500,
        type: "parse-error",
        error: err
      };
    }
    if (err instanceof ReferenceError && err.toString().includes("window is not defined")) {
      return {
        statusCode: 500,
        type: "ssr",
        error: new Error(`[${reqPath}]
    The window object is not available during server-side rendering (SSR).
    Try using \`import.meta.env.SSR\` to write SSR-friendly code.
    https://github.com/snowpackjs/astro/blob/main/docs/reference/api-reference.md#importmeta`)
      };
    }
    if (err instanceof NotFoundError && rawPathname) {
      const fileMatch = err.toString().match(/\(([^\)]+)\)/);
      const missingFile = fileMatch && fileMatch[1].replace(/^\/_astro/, "").replace(/\.proxy\.js$/, "") || void 0;
      const distPath = path5.extname(rawPathname) ? rawPathname : rawPathname.replace(/\/?$/, "/index.html");
      const srcFile = getSrcPath(distPath, {astroConfig: config.astroConfig});
      const code = existsSync3(srcFile) ? await fs2.readFile(srcFile, "utf8") : "";
      let start = 0;
      const segments = missingFile ? missingFile.split("/").filter((segment) => !!segment) : [];
      while (segments.length) {
        const importMatch = code.indexOf(segments.join("/"));
        if (importMatch >= 0) {
          start = importMatch;
          break;
        }
        segments.shift();
      }
      return {
        statusCode: 500,
        type: "not-found",
        error: new CompileError({
          code,
          filename: srcFile.pathname,
          start,
          message: `Could not find${missingFile ? ` "${missingFile}"` : " file"}`
        })
      };
    }
    return {
      statusCode: 500,
      type: "unknown",
      error: err
    };
  }
}
async function createSnowpack(astroConfig, options) {
  var _a;
  const {projectRoot, src} = astroConfig;
  const {mode, resolvePackageUrl} = options;
  const frontendPath = new URL("./frontend/", import.meta.url);
  const resolveDependency = (dep) => resolve2.sync(dep, {basedir: fileURLToPath3(projectRoot)});
  const isHmrEnabled = mode === "development";
  const configManager = new ConfigManager(astroConfig, resolvePackageUrl);
  let snowpack;
  let astroPluginOptions = {
    astroConfig,
    mode,
    resolvePackageUrl,
    configManager
  };
  const mountOptions = __spreadProps(__spreadValues({}, existsSync3(astroConfig.public) ? {[fileURLToPath3(astroConfig.public)]: "/"} : {}), {
    [fileURLToPath3(frontendPath)]: "/_astro_frontend",
    [fileURLToPath3(src)]: "/_astro/src"
  });
  if (astroConfig.devOptions.tailwindConfig) {
    process.env.TAILWIND_DISABLE_TOUCH = true;
  }
  const rendererInstances = await configManager.buildRendererInstances();
  const knownEntrypoints = ["astro/dist/internal/__astro_component.js", "astro/dist/internal/element-registry.js"];
  for (const renderer of rendererInstances) {
    knownEntrypoints.push(renderer.server);
    if (renderer.client) {
      knownEntrypoints.push(renderer.client);
    }
    if (renderer.knownEntrypoints) {
      knownEntrypoints.push(...renderer.knownEntrypoints);
    }
    knownEntrypoints.push(...renderer.polyfills);
    knownEntrypoints.push(...renderer.hydrationPolyfills);
  }
  const external = external_default.concat([]);
  for (const renderer of rendererInstances) {
    if (renderer.external) {
      external.push(...renderer.external);
    }
  }
  const rendererSnowpackPlugins = rendererInstances.filter((renderer) => renderer.snowpackPlugin).map((renderer) => renderer.snowpackPlugin);
  const snowpackConfig = await loadConfiguration({
    root: fileURLToPath3(projectRoot),
    mount: mountOptions,
    mode,
    plugins: [
      [fileURLToPath3(new URL("../snowpack-plugin.cjs", import.meta.url)), astroPluginOptions],
      ...rendererSnowpackPlugins,
      resolveDependency("@snowpack/plugin-sass"),
      [
        resolveDependency("@snowpack/plugin-postcss"),
        {
          config: {
            plugins: __spreadValues({
              [resolveDependency("autoprefixer")]: {}
            }, astroConfig.devOptions.tailwindConfig ? {[resolveDependency("tailwindcss")]: astroConfig.devOptions.tailwindConfig} : {})
          }
        }
      ]
    ],
    devOptions: {
      open: "none",
      output: "stream",
      port: 0,
      hmr: isHmrEnabled,
      tailwindConfig: astroConfig.devOptions.tailwindConfig
    },
    buildOptions: {
      baseUrl: astroConfig.buildOptions.site || "/",
      out: astroConfig.dist
    },
    packageOptions: {
      knownEntrypoints,
      external
    }
  });
  const polyfillNode = snowpackConfig.packageOptions.polyfillNode;
  if (!polyfillNode) {
    snowpackConfig.alias = Object.assign({}, Object.fromEntries(nodeBuiltinsMap), (_a = snowpackConfig.alias) != null ? _a : {});
  }
  snowpack = await startSnowpackServer({
    config: snowpackConfig,
    lockfile: null
  }, {
    isWatch: mode === "development"
  });
  const snowpackRuntime = snowpack.getServerRuntime();
  astroPluginOptions.configManager.snowpackRuntime = snowpackRuntime;
  return {snowpack, snowpackRuntime, snowpackConfig, configManager};
}
async function createRuntime(astroConfig, {mode, logging}) {
  let snowpack;
  const timer = {};
  const resolvePackageUrl = async (pkgName) => snowpack.getUrlForPackage(pkgName);
  timer.backend = performance2.now();
  const {
    snowpack: snowpackInstance,
    snowpackRuntime,
    snowpackConfig,
    configManager
  } = await createSnowpack(astroConfig, {
    mode,
    resolvePackageUrl
  });
  snowpack = snowpackInstance;
  debug(logging, "core", `snowpack created [${stopTimer(timer.backend)}]`);
  const runtimeConfig = {
    astroConfig,
    logging,
    mode,
    snowpack,
    snowpackRuntime,
    snowpackConfig,
    configManager
  };
  return {
    runtimeConfig,
    load: load.bind(null, runtimeConfig),
    shutdown: () => snowpack.shutdown()
  };
}
export {
  createRuntime
};
//# sourceMappingURL=data:application/json;base64,
