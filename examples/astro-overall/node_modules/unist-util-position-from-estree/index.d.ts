/**
 * @typedef {import('unist').Position} Position
 *
 * @typedef {[number, number]} RangeLike
 *
 * @typedef {Object} PointLike
 * @property {number} [line]
 * @property {number} [column]
 *
 * @typedef {Object} LocLike
 * @property {PointLike} [start]
 * @property {PointLike} [end]
 *
 * @typedef {Object} NodeLike
 * @property {LocLike} [loc]
 * @property {RangeLike} [range]
 * @property {number} [start]
 * @property {number} [end]
 */
/**
 * Given an estree `node`, returns a unist `position`.
 * @param {NodeLike} [value]
 * @returns {Position}
 */
export function positionFromEstree(value?: NodeLike): Position
export type Position = import('unist').Position
export type RangeLike = [number, number]
export type PointLike = {
  line?: number
  column?: number
}
export type LocLike = {
  start?: PointLike
  end?: PointLike
}
export type NodeLike = {
  loc?: LocLike
  range?: RangeLike
  start?: number
  end?: number
}
